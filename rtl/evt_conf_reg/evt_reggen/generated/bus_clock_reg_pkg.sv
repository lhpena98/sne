// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Package auto-generated by `reggen` containing data structure

package bus_clock_reg_pkg;

  // Param list
  parameter int STREAM_NUMBER = 2;
  parameter int SLICE_NUMBER = 1;
  parameter int GROUP_NUMBER = 16;
  parameter int TOTAL_GROUP_NUMBER = 16;
  parameter int XBAR_SLAVE_NUMBER = 4;
  parameter int XBAR_MASTER_NUMBER = 4;
  parameter int ORACLE_NUMBER = 9;
  parameter int NEURON_NUMBER = 4096;
  parameter int cfg_xbar_stage_0 = 8;
  parameter int cfg_xbar_stage_1 = 6;

  ////////////////////////////
  // Typedefs for registers //
  ////////////////////////////
  typedef struct packed {
    logic [3:0]  q;
  } bus_clock_reg2hw_xbar_slave_node_cfg_mreg_t;

  typedef struct packed {
    struct packed {
      logic [7:0]  q;
    } ack_err;
    struct packed {
      logic [7:0]  q;
    } slice_enable;
    struct packed {
      logic [7:0]  q;
    } select_stream;
    struct packed {
      logic        q;
    } fc_enable;
  } bus_clock_reg2hw_cfg_complex_i_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } bus_clock_reg2hw_cfg_xbar_barrier_i_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } bus_clock_reg2hw_cfg_xbar_synch_i_reg_t;

  typedef struct packed {
    struct packed {
      logic [4:0]  q;
    } cfg_5;
    struct packed {
      logic [4:0]  q;
    } cfg_4;
    struct packed {
      logic [4:0]  q;
    } cfg_3;
    struct packed {
      logic [4:0]  q;
    } cfg_2;
    struct packed {
      logic [4:0]  q;
    } cfg_1;
    struct packed {
      logic [4:0]  q;
    } cfg_0;
  } bus_clock_reg2hw_cfg_xbar_stage_0_mreg_t;

  typedef struct packed {
    struct packed {
      logic [4:0]  q;
    } cfg_5;
    struct packed {
      logic [4:0]  q;
    } cfg_4;
    struct packed {
      logic [4:0]  q;
    } cfg_3;
    struct packed {
      logic [4:0]  q;
    } cfg_2;
    struct packed {
      logic [4:0]  q;
    } cfg_1;
    struct packed {
      logic [4:0]  q;
    } cfg_0;
  } bus_clock_reg2hw_cfg_xbar_stage_1_mreg_t;


  typedef struct packed {
    struct packed {
      logic [7:0]  d;
      logic        de;
    } ack_err;
    struct packed {
      logic [7:0]  d;
      logic        de;
    } slice_enable;
    struct packed {
      logic [7:0]  d;
      logic        de;
    } select_stream;
    struct packed {
      logic        d;
      logic        de;
    } fc_enable;
  } bus_clock_hw2reg_cfg_complex_i_reg_t;

  typedef struct packed {
    logic [31:0] d;
    logic        de;
  } bus_clock_hw2reg_cfg_xbar_barrier_i_reg_t;

  typedef struct packed {
    logic [31:0] d;
    logic        de;
  } bus_clock_hw2reg_cfg_xbar_synch_i_reg_t;


  ///////////////////////////////////////
  // Register to internal design logic //
  ///////////////////////////////////////
  typedef struct packed {
    bus_clock_reg2hw_xbar_slave_node_cfg_mreg_t [3:0] xbar_slave_node_cfg; // [525:510]
    bus_clock_reg2hw_cfg_complex_i_reg_t cfg_complex_i; // [509:485]
    bus_clock_reg2hw_cfg_xbar_barrier_i_reg_t cfg_xbar_barrier_i; // [484:453]
    bus_clock_reg2hw_cfg_xbar_synch_i_reg_t cfg_xbar_synch_i; // [452:421]
    bus_clock_reg2hw_cfg_xbar_stage_0_mreg_t [7:0] cfg_xbar_stage_0; // [420:181]
    bus_clock_reg2hw_cfg_xbar_stage_1_mreg_t [5:0] cfg_xbar_stage_1; // [180:1]
  } bus_clock_reg2hw_t;

  ///////////////////////////////////////
  // Internal design logic to register //
  ///////////////////////////////////////
  typedef struct packed {
    bus_clock_hw2reg_cfg_complex_i_reg_t cfg_complex_i; // [95:71]
    bus_clock_hw2reg_cfg_xbar_barrier_i_reg_t cfg_xbar_barrier_i; // [70:39]
    bus_clock_hw2reg_cfg_xbar_synch_i_reg_t cfg_xbar_synch_i; // [38:7]
  } bus_clock_hw2reg_t;

  // Register Address
  parameter logic [9:0] BUS_CLOCK_XBAR_SLAVE_NODE_CFG_OFFSET = 10'h 200;
  parameter logic [9:0] BUS_CLOCK_CFG_COMPLEX_I_OFFSET = 10'h 204;
  parameter logic [9:0] BUS_CLOCK_CFG_XBAR_BARRIER_I_OFFSET = 10'h 208;
  parameter logic [9:0] BUS_CLOCK_CFG_XBAR_SYNCH_I_OFFSET = 10'h 20c;
  parameter logic [9:0] BUS_CLOCK_CFG_XBAR_STAGE_0_0_OFFSET = 10'h 210;
  parameter logic [9:0] BUS_CLOCK_CFG_XBAR_STAGE_0_1_OFFSET = 10'h 214;
  parameter logic [9:0] BUS_CLOCK_CFG_XBAR_STAGE_0_2_OFFSET = 10'h 218;
  parameter logic [9:0] BUS_CLOCK_CFG_XBAR_STAGE_0_3_OFFSET = 10'h 21c;
  parameter logic [9:0] BUS_CLOCK_CFG_XBAR_STAGE_0_4_OFFSET = 10'h 220;
  parameter logic [9:0] BUS_CLOCK_CFG_XBAR_STAGE_0_5_OFFSET = 10'h 224;
  parameter logic [9:0] BUS_CLOCK_CFG_XBAR_STAGE_0_6_OFFSET = 10'h 228;
  parameter logic [9:0] BUS_CLOCK_CFG_XBAR_STAGE_0_7_OFFSET = 10'h 22c;
  parameter logic [9:0] BUS_CLOCK_CFG_XBAR_STAGE_1_0_OFFSET = 10'h 230;
  parameter logic [9:0] BUS_CLOCK_CFG_XBAR_STAGE_1_1_OFFSET = 10'h 234;
  parameter logic [9:0] BUS_CLOCK_CFG_XBAR_STAGE_1_2_OFFSET = 10'h 238;
  parameter logic [9:0] BUS_CLOCK_CFG_XBAR_STAGE_1_3_OFFSET = 10'h 23c;
  parameter logic [9:0] BUS_CLOCK_CFG_XBAR_STAGE_1_4_OFFSET = 10'h 240;
  parameter logic [9:0] BUS_CLOCK_CFG_XBAR_STAGE_1_5_OFFSET = 10'h 244;


  // Register Index
  typedef enum int {
    BUS_CLOCK_XBAR_SLAVE_NODE_CFG,
    BUS_CLOCK_CFG_COMPLEX_I,
    BUS_CLOCK_CFG_XBAR_BARRIER_I,
    BUS_CLOCK_CFG_XBAR_SYNCH_I,
    BUS_CLOCK_CFG_XBAR_STAGE_0_0,
    BUS_CLOCK_CFG_XBAR_STAGE_0_1,
    BUS_CLOCK_CFG_XBAR_STAGE_0_2,
    BUS_CLOCK_CFG_XBAR_STAGE_0_3,
    BUS_CLOCK_CFG_XBAR_STAGE_0_4,
    BUS_CLOCK_CFG_XBAR_STAGE_0_5,
    BUS_CLOCK_CFG_XBAR_STAGE_0_6,
    BUS_CLOCK_CFG_XBAR_STAGE_0_7,
    BUS_CLOCK_CFG_XBAR_STAGE_1_0,
    BUS_CLOCK_CFG_XBAR_STAGE_1_1,
    BUS_CLOCK_CFG_XBAR_STAGE_1_2,
    BUS_CLOCK_CFG_XBAR_STAGE_1_3,
    BUS_CLOCK_CFG_XBAR_STAGE_1_4,
    BUS_CLOCK_CFG_XBAR_STAGE_1_5
  } bus_clock_id_e;

  // Register width information to check illegal writes
  parameter logic [3:0] BUS_CLOCK_PERMIT [18] = '{
    4'b 0011, // index[ 0] BUS_CLOCK_XBAR_SLAVE_NODE_CFG
    4'b 1111, // index[ 1] BUS_CLOCK_CFG_COMPLEX_I
    4'b 1111, // index[ 2] BUS_CLOCK_CFG_XBAR_BARRIER_I
    4'b 1111, // index[ 3] BUS_CLOCK_CFG_XBAR_SYNCH_I
    4'b 1111, // index[ 4] BUS_CLOCK_CFG_XBAR_STAGE_0_0
    4'b 1111, // index[ 5] BUS_CLOCK_CFG_XBAR_STAGE_0_1
    4'b 1111, // index[ 6] BUS_CLOCK_CFG_XBAR_STAGE_0_2
    4'b 1111, // index[ 7] BUS_CLOCK_CFG_XBAR_STAGE_0_3
    4'b 1111, // index[ 8] BUS_CLOCK_CFG_XBAR_STAGE_0_4
    4'b 1111, // index[ 9] BUS_CLOCK_CFG_XBAR_STAGE_0_5
    4'b 1111, // index[10] BUS_CLOCK_CFG_XBAR_STAGE_0_6
    4'b 1111, // index[11] BUS_CLOCK_CFG_XBAR_STAGE_0_7
    4'b 1111, // index[12] BUS_CLOCK_CFG_XBAR_STAGE_1_0
    4'b 1111, // index[13] BUS_CLOCK_CFG_XBAR_STAGE_1_1
    4'b 1111, // index[14] BUS_CLOCK_CFG_XBAR_STAGE_1_2
    4'b 1111, // index[15] BUS_CLOCK_CFG_XBAR_STAGE_1_3
    4'b 1111, // index[16] BUS_CLOCK_CFG_XBAR_STAGE_1_4
    4'b 1111  // index[17] BUS_CLOCK_CFG_XBAR_STAGE_1_5
  };
endpackage

