// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Top module auto-generated by `reggen`

`include "common_cells/assertions.svh"

module bus_clock_reg_top #(
  parameter type reg_req_t = logic,
  parameter type reg_rsp_t = logic
) (
  input clk_i,
  input rst_ni,

  // Below Register interface can be changed
  input  reg_req_t reg_req_i,
  output reg_rsp_t reg_rsp_o,
  // To HW
  output bus_clock_reg_pkg::bus_clock_reg2hw_t reg2hw, // Write
  input  bus_clock_reg_pkg::bus_clock_hw2reg_t hw2reg, // Read

  // Config
  input devmode_i // If 1, explicit error return for unmapped register access
);

  import bus_clock_reg_pkg::* ;

  localparam int AW = 10;
  localparam int DW = 32;
  localparam int DBW = DW/8;                    // Byte Width

  // register signals
  logic           reg_we;
  logic           reg_re;
  logic [AW-1:0]  reg_addr;
  logic [DW-1:0]  reg_wdata;
  logic [DBW-1:0] reg_be;
  logic [DW-1:0]  reg_rdata;
  logic           reg_error;

  logic          addrmiss, wr_err;

  logic [DW-1:0] reg_rdata_next;

  reg_req_t reg_intf_req;
  reg_rsp_t reg_intf_rsp;

  assign reg_intf_req = reg_req_i;
  assign reg_rsp_o = reg_intf_rsp;

  assign reg_we = reg_intf_req.valid & reg_intf_req.write;
  assign reg_re = reg_intf_req.valid & ~reg_intf_req.write;
  assign reg_addr = reg_intf_req.addr;
  assign reg_wdata = reg_intf_req.wdata;
  assign reg_be = reg_intf_req.wstrb;
  assign reg_intf_rsp.rdata = reg_rdata;
  assign reg_intf_rsp.error = reg_error;
  assign reg_intf_rsp.ready = 1'b1;

  assign reg_rdata = reg_rdata_next ;
  assign reg_error = (devmode_i & addrmiss) | wr_err ;

  // Define SW related signals
  // Format: <reg>_<field>_{wd|we|qs}
  //        or <reg>_{wd|we|qs} if field == 1 or 0
  logic [3:0] xbar_slave_node_cfg_xbar_slave_node_cfg_0_qs;
  logic [3:0] xbar_slave_node_cfg_xbar_slave_node_cfg_0_wd;
  logic xbar_slave_node_cfg_xbar_slave_node_cfg_0_we;
  logic [3:0] xbar_slave_node_cfg_xbar_slave_node_cfg_1_qs;
  logic [3:0] xbar_slave_node_cfg_xbar_slave_node_cfg_1_wd;
  logic xbar_slave_node_cfg_xbar_slave_node_cfg_1_we;
  logic [3:0] xbar_slave_node_cfg_xbar_slave_node_cfg_2_qs;
  logic [3:0] xbar_slave_node_cfg_xbar_slave_node_cfg_2_wd;
  logic xbar_slave_node_cfg_xbar_slave_node_cfg_2_we;
  logic [3:0] xbar_slave_node_cfg_xbar_slave_node_cfg_3_qs;
  logic [3:0] xbar_slave_node_cfg_xbar_slave_node_cfg_3_wd;
  logic xbar_slave_node_cfg_xbar_slave_node_cfg_3_we;
  logic [7:0] cfg_complex_i_ack_err_qs;
  logic [7:0] cfg_complex_i_ack_err_wd;
  logic cfg_complex_i_ack_err_we;
  logic [7:0] cfg_complex_i_slice_enable_qs;
  logic [7:0] cfg_complex_i_slice_enable_wd;
  logic cfg_complex_i_slice_enable_we;
  logic [7:0] cfg_complex_i_select_stream_qs;
  logic [7:0] cfg_complex_i_select_stream_wd;
  logic cfg_complex_i_select_stream_we;
  logic cfg_complex_i_fc_enable_qs;
  logic cfg_complex_i_fc_enable_wd;
  logic cfg_complex_i_fc_enable_we;
  logic [31:0] cfg_xbar_barrier_i_qs;
  logic [31:0] cfg_xbar_barrier_i_wd;
  logic cfg_xbar_barrier_i_we;
  logic [31:0] cfg_xbar_synch_i_qs;
  logic [31:0] cfg_xbar_synch_i_wd;
  logic cfg_xbar_synch_i_we;
  logic [4:0] cfg_xbar_stage_0_0_cfg_5_0_qs;
  logic [4:0] cfg_xbar_stage_0_0_cfg_5_0_wd;
  logic cfg_xbar_stage_0_0_cfg_5_0_we;
  logic [4:0] cfg_xbar_stage_0_0_cfg_4_0_qs;
  logic [4:0] cfg_xbar_stage_0_0_cfg_4_0_wd;
  logic cfg_xbar_stage_0_0_cfg_4_0_we;
  logic [4:0] cfg_xbar_stage_0_0_cfg_3_0_qs;
  logic [4:0] cfg_xbar_stage_0_0_cfg_3_0_wd;
  logic cfg_xbar_stage_0_0_cfg_3_0_we;
  logic [4:0] cfg_xbar_stage_0_0_cfg_2_0_qs;
  logic [4:0] cfg_xbar_stage_0_0_cfg_2_0_wd;
  logic cfg_xbar_stage_0_0_cfg_2_0_we;
  logic [4:0] cfg_xbar_stage_0_0_cfg_1_0_qs;
  logic [4:0] cfg_xbar_stage_0_0_cfg_1_0_wd;
  logic cfg_xbar_stage_0_0_cfg_1_0_we;
  logic [4:0] cfg_xbar_stage_0_0_cfg_0_0_qs;
  logic [4:0] cfg_xbar_stage_0_0_cfg_0_0_wd;
  logic cfg_xbar_stage_0_0_cfg_0_0_we;
  logic [4:0] cfg_xbar_stage_0_1_cfg_5_1_qs;
  logic [4:0] cfg_xbar_stage_0_1_cfg_5_1_wd;
  logic cfg_xbar_stage_0_1_cfg_5_1_we;
  logic [4:0] cfg_xbar_stage_0_1_cfg_4_1_qs;
  logic [4:0] cfg_xbar_stage_0_1_cfg_4_1_wd;
  logic cfg_xbar_stage_0_1_cfg_4_1_we;
  logic [4:0] cfg_xbar_stage_0_1_cfg_3_1_qs;
  logic [4:0] cfg_xbar_stage_0_1_cfg_3_1_wd;
  logic cfg_xbar_stage_0_1_cfg_3_1_we;
  logic [4:0] cfg_xbar_stage_0_1_cfg_2_1_qs;
  logic [4:0] cfg_xbar_stage_0_1_cfg_2_1_wd;
  logic cfg_xbar_stage_0_1_cfg_2_1_we;
  logic [4:0] cfg_xbar_stage_0_1_cfg_1_1_qs;
  logic [4:0] cfg_xbar_stage_0_1_cfg_1_1_wd;
  logic cfg_xbar_stage_0_1_cfg_1_1_we;
  logic [4:0] cfg_xbar_stage_0_1_cfg_0_1_qs;
  logic [4:0] cfg_xbar_stage_0_1_cfg_0_1_wd;
  logic cfg_xbar_stage_0_1_cfg_0_1_we;
  logic [4:0] cfg_xbar_stage_0_2_cfg_5_2_qs;
  logic [4:0] cfg_xbar_stage_0_2_cfg_5_2_wd;
  logic cfg_xbar_stage_0_2_cfg_5_2_we;
  logic [4:0] cfg_xbar_stage_0_2_cfg_4_2_qs;
  logic [4:0] cfg_xbar_stage_0_2_cfg_4_2_wd;
  logic cfg_xbar_stage_0_2_cfg_4_2_we;
  logic [4:0] cfg_xbar_stage_0_2_cfg_3_2_qs;
  logic [4:0] cfg_xbar_stage_0_2_cfg_3_2_wd;
  logic cfg_xbar_stage_0_2_cfg_3_2_we;
  logic [4:0] cfg_xbar_stage_0_2_cfg_2_2_qs;
  logic [4:0] cfg_xbar_stage_0_2_cfg_2_2_wd;
  logic cfg_xbar_stage_0_2_cfg_2_2_we;
  logic [4:0] cfg_xbar_stage_0_2_cfg_1_2_qs;
  logic [4:0] cfg_xbar_stage_0_2_cfg_1_2_wd;
  logic cfg_xbar_stage_0_2_cfg_1_2_we;
  logic [4:0] cfg_xbar_stage_0_2_cfg_0_2_qs;
  logic [4:0] cfg_xbar_stage_0_2_cfg_0_2_wd;
  logic cfg_xbar_stage_0_2_cfg_0_2_we;
  logic [4:0] cfg_xbar_stage_0_3_cfg_5_3_qs;
  logic [4:0] cfg_xbar_stage_0_3_cfg_5_3_wd;
  logic cfg_xbar_stage_0_3_cfg_5_3_we;
  logic [4:0] cfg_xbar_stage_0_3_cfg_4_3_qs;
  logic [4:0] cfg_xbar_stage_0_3_cfg_4_3_wd;
  logic cfg_xbar_stage_0_3_cfg_4_3_we;
  logic [4:0] cfg_xbar_stage_0_3_cfg_3_3_qs;
  logic [4:0] cfg_xbar_stage_0_3_cfg_3_3_wd;
  logic cfg_xbar_stage_0_3_cfg_3_3_we;
  logic [4:0] cfg_xbar_stage_0_3_cfg_2_3_qs;
  logic [4:0] cfg_xbar_stage_0_3_cfg_2_3_wd;
  logic cfg_xbar_stage_0_3_cfg_2_3_we;
  logic [4:0] cfg_xbar_stage_0_3_cfg_1_3_qs;
  logic [4:0] cfg_xbar_stage_0_3_cfg_1_3_wd;
  logic cfg_xbar_stage_0_3_cfg_1_3_we;
  logic [4:0] cfg_xbar_stage_0_3_cfg_0_3_qs;
  logic [4:0] cfg_xbar_stage_0_3_cfg_0_3_wd;
  logic cfg_xbar_stage_0_3_cfg_0_3_we;
  logic [4:0] cfg_xbar_stage_0_4_cfg_5_4_qs;
  logic [4:0] cfg_xbar_stage_0_4_cfg_5_4_wd;
  logic cfg_xbar_stage_0_4_cfg_5_4_we;
  logic [4:0] cfg_xbar_stage_0_4_cfg_4_4_qs;
  logic [4:0] cfg_xbar_stage_0_4_cfg_4_4_wd;
  logic cfg_xbar_stage_0_4_cfg_4_4_we;
  logic [4:0] cfg_xbar_stage_0_4_cfg_3_4_qs;
  logic [4:0] cfg_xbar_stage_0_4_cfg_3_4_wd;
  logic cfg_xbar_stage_0_4_cfg_3_4_we;
  logic [4:0] cfg_xbar_stage_0_4_cfg_2_4_qs;
  logic [4:0] cfg_xbar_stage_0_4_cfg_2_4_wd;
  logic cfg_xbar_stage_0_4_cfg_2_4_we;
  logic [4:0] cfg_xbar_stage_0_4_cfg_1_4_qs;
  logic [4:0] cfg_xbar_stage_0_4_cfg_1_4_wd;
  logic cfg_xbar_stage_0_4_cfg_1_4_we;
  logic [4:0] cfg_xbar_stage_0_4_cfg_0_4_qs;
  logic [4:0] cfg_xbar_stage_0_4_cfg_0_4_wd;
  logic cfg_xbar_stage_0_4_cfg_0_4_we;
  logic [4:0] cfg_xbar_stage_0_5_cfg_5_5_qs;
  logic [4:0] cfg_xbar_stage_0_5_cfg_5_5_wd;
  logic cfg_xbar_stage_0_5_cfg_5_5_we;
  logic [4:0] cfg_xbar_stage_0_5_cfg_4_5_qs;
  logic [4:0] cfg_xbar_stage_0_5_cfg_4_5_wd;
  logic cfg_xbar_stage_0_5_cfg_4_5_we;
  logic [4:0] cfg_xbar_stage_0_5_cfg_3_5_qs;
  logic [4:0] cfg_xbar_stage_0_5_cfg_3_5_wd;
  logic cfg_xbar_stage_0_5_cfg_3_5_we;
  logic [4:0] cfg_xbar_stage_0_5_cfg_2_5_qs;
  logic [4:0] cfg_xbar_stage_0_5_cfg_2_5_wd;
  logic cfg_xbar_stage_0_5_cfg_2_5_we;
  logic [4:0] cfg_xbar_stage_0_5_cfg_1_5_qs;
  logic [4:0] cfg_xbar_stage_0_5_cfg_1_5_wd;
  logic cfg_xbar_stage_0_5_cfg_1_5_we;
  logic [4:0] cfg_xbar_stage_0_5_cfg_0_5_qs;
  logic [4:0] cfg_xbar_stage_0_5_cfg_0_5_wd;
  logic cfg_xbar_stage_0_5_cfg_0_5_we;
  logic [4:0] cfg_xbar_stage_0_6_cfg_5_6_qs;
  logic [4:0] cfg_xbar_stage_0_6_cfg_5_6_wd;
  logic cfg_xbar_stage_0_6_cfg_5_6_we;
  logic [4:0] cfg_xbar_stage_0_6_cfg_4_6_qs;
  logic [4:0] cfg_xbar_stage_0_6_cfg_4_6_wd;
  logic cfg_xbar_stage_0_6_cfg_4_6_we;
  logic [4:0] cfg_xbar_stage_0_6_cfg_3_6_qs;
  logic [4:0] cfg_xbar_stage_0_6_cfg_3_6_wd;
  logic cfg_xbar_stage_0_6_cfg_3_6_we;
  logic [4:0] cfg_xbar_stage_0_6_cfg_2_6_qs;
  logic [4:0] cfg_xbar_stage_0_6_cfg_2_6_wd;
  logic cfg_xbar_stage_0_6_cfg_2_6_we;
  logic [4:0] cfg_xbar_stage_0_6_cfg_1_6_qs;
  logic [4:0] cfg_xbar_stage_0_6_cfg_1_6_wd;
  logic cfg_xbar_stage_0_6_cfg_1_6_we;
  logic [4:0] cfg_xbar_stage_0_6_cfg_0_6_qs;
  logic [4:0] cfg_xbar_stage_0_6_cfg_0_6_wd;
  logic cfg_xbar_stage_0_6_cfg_0_6_we;
  logic [4:0] cfg_xbar_stage_0_7_cfg_5_7_qs;
  logic [4:0] cfg_xbar_stage_0_7_cfg_5_7_wd;
  logic cfg_xbar_stage_0_7_cfg_5_7_we;
  logic [4:0] cfg_xbar_stage_0_7_cfg_4_7_qs;
  logic [4:0] cfg_xbar_stage_0_7_cfg_4_7_wd;
  logic cfg_xbar_stage_0_7_cfg_4_7_we;
  logic [4:0] cfg_xbar_stage_0_7_cfg_3_7_qs;
  logic [4:0] cfg_xbar_stage_0_7_cfg_3_7_wd;
  logic cfg_xbar_stage_0_7_cfg_3_7_we;
  logic [4:0] cfg_xbar_stage_0_7_cfg_2_7_qs;
  logic [4:0] cfg_xbar_stage_0_7_cfg_2_7_wd;
  logic cfg_xbar_stage_0_7_cfg_2_7_we;
  logic [4:0] cfg_xbar_stage_0_7_cfg_1_7_qs;
  logic [4:0] cfg_xbar_stage_0_7_cfg_1_7_wd;
  logic cfg_xbar_stage_0_7_cfg_1_7_we;
  logic [4:0] cfg_xbar_stage_0_7_cfg_0_7_qs;
  logic [4:0] cfg_xbar_stage_0_7_cfg_0_7_wd;
  logic cfg_xbar_stage_0_7_cfg_0_7_we;
  logic [4:0] cfg_xbar_stage_1_0_cfg_5_0_qs;
  logic [4:0] cfg_xbar_stage_1_0_cfg_5_0_wd;
  logic cfg_xbar_stage_1_0_cfg_5_0_we;
  logic [4:0] cfg_xbar_stage_1_0_cfg_4_0_qs;
  logic [4:0] cfg_xbar_stage_1_0_cfg_4_0_wd;
  logic cfg_xbar_stage_1_0_cfg_4_0_we;
  logic [4:0] cfg_xbar_stage_1_0_cfg_3_0_qs;
  logic [4:0] cfg_xbar_stage_1_0_cfg_3_0_wd;
  logic cfg_xbar_stage_1_0_cfg_3_0_we;
  logic [4:0] cfg_xbar_stage_1_0_cfg_2_0_qs;
  logic [4:0] cfg_xbar_stage_1_0_cfg_2_0_wd;
  logic cfg_xbar_stage_1_0_cfg_2_0_we;
  logic [4:0] cfg_xbar_stage_1_0_cfg_1_0_qs;
  logic [4:0] cfg_xbar_stage_1_0_cfg_1_0_wd;
  logic cfg_xbar_stage_1_0_cfg_1_0_we;
  logic [4:0] cfg_xbar_stage_1_0_cfg_0_0_qs;
  logic [4:0] cfg_xbar_stage_1_0_cfg_0_0_wd;
  logic cfg_xbar_stage_1_0_cfg_0_0_we;
  logic [4:0] cfg_xbar_stage_1_1_cfg_5_1_qs;
  logic [4:0] cfg_xbar_stage_1_1_cfg_5_1_wd;
  logic cfg_xbar_stage_1_1_cfg_5_1_we;
  logic [4:0] cfg_xbar_stage_1_1_cfg_4_1_qs;
  logic [4:0] cfg_xbar_stage_1_1_cfg_4_1_wd;
  logic cfg_xbar_stage_1_1_cfg_4_1_we;
  logic [4:0] cfg_xbar_stage_1_1_cfg_3_1_qs;
  logic [4:0] cfg_xbar_stage_1_1_cfg_3_1_wd;
  logic cfg_xbar_stage_1_1_cfg_3_1_we;
  logic [4:0] cfg_xbar_stage_1_1_cfg_2_1_qs;
  logic [4:0] cfg_xbar_stage_1_1_cfg_2_1_wd;
  logic cfg_xbar_stage_1_1_cfg_2_1_we;
  logic [4:0] cfg_xbar_stage_1_1_cfg_1_1_qs;
  logic [4:0] cfg_xbar_stage_1_1_cfg_1_1_wd;
  logic cfg_xbar_stage_1_1_cfg_1_1_we;
  logic [4:0] cfg_xbar_stage_1_1_cfg_0_1_qs;
  logic [4:0] cfg_xbar_stage_1_1_cfg_0_1_wd;
  logic cfg_xbar_stage_1_1_cfg_0_1_we;
  logic [4:0] cfg_xbar_stage_1_2_cfg_5_2_qs;
  logic [4:0] cfg_xbar_stage_1_2_cfg_5_2_wd;
  logic cfg_xbar_stage_1_2_cfg_5_2_we;
  logic [4:0] cfg_xbar_stage_1_2_cfg_4_2_qs;
  logic [4:0] cfg_xbar_stage_1_2_cfg_4_2_wd;
  logic cfg_xbar_stage_1_2_cfg_4_2_we;
  logic [4:0] cfg_xbar_stage_1_2_cfg_3_2_qs;
  logic [4:0] cfg_xbar_stage_1_2_cfg_3_2_wd;
  logic cfg_xbar_stage_1_2_cfg_3_2_we;
  logic [4:0] cfg_xbar_stage_1_2_cfg_2_2_qs;
  logic [4:0] cfg_xbar_stage_1_2_cfg_2_2_wd;
  logic cfg_xbar_stage_1_2_cfg_2_2_we;
  logic [4:0] cfg_xbar_stage_1_2_cfg_1_2_qs;
  logic [4:0] cfg_xbar_stage_1_2_cfg_1_2_wd;
  logic cfg_xbar_stage_1_2_cfg_1_2_we;
  logic [4:0] cfg_xbar_stage_1_2_cfg_0_2_qs;
  logic [4:0] cfg_xbar_stage_1_2_cfg_0_2_wd;
  logic cfg_xbar_stage_1_2_cfg_0_2_we;
  logic [4:0] cfg_xbar_stage_1_3_cfg_5_3_qs;
  logic [4:0] cfg_xbar_stage_1_3_cfg_5_3_wd;
  logic cfg_xbar_stage_1_3_cfg_5_3_we;
  logic [4:0] cfg_xbar_stage_1_3_cfg_4_3_qs;
  logic [4:0] cfg_xbar_stage_1_3_cfg_4_3_wd;
  logic cfg_xbar_stage_1_3_cfg_4_3_we;
  logic [4:0] cfg_xbar_stage_1_3_cfg_3_3_qs;
  logic [4:0] cfg_xbar_stage_1_3_cfg_3_3_wd;
  logic cfg_xbar_stage_1_3_cfg_3_3_we;
  logic [4:0] cfg_xbar_stage_1_3_cfg_2_3_qs;
  logic [4:0] cfg_xbar_stage_1_3_cfg_2_3_wd;
  logic cfg_xbar_stage_1_3_cfg_2_3_we;
  logic [4:0] cfg_xbar_stage_1_3_cfg_1_3_qs;
  logic [4:0] cfg_xbar_stage_1_3_cfg_1_3_wd;
  logic cfg_xbar_stage_1_3_cfg_1_3_we;
  logic [4:0] cfg_xbar_stage_1_3_cfg_0_3_qs;
  logic [4:0] cfg_xbar_stage_1_3_cfg_0_3_wd;
  logic cfg_xbar_stage_1_3_cfg_0_3_we;
  logic [4:0] cfg_xbar_stage_1_4_cfg_5_4_qs;
  logic [4:0] cfg_xbar_stage_1_4_cfg_5_4_wd;
  logic cfg_xbar_stage_1_4_cfg_5_4_we;
  logic [4:0] cfg_xbar_stage_1_4_cfg_4_4_qs;
  logic [4:0] cfg_xbar_stage_1_4_cfg_4_4_wd;
  logic cfg_xbar_stage_1_4_cfg_4_4_we;
  logic [4:0] cfg_xbar_stage_1_4_cfg_3_4_qs;
  logic [4:0] cfg_xbar_stage_1_4_cfg_3_4_wd;
  logic cfg_xbar_stage_1_4_cfg_3_4_we;
  logic [4:0] cfg_xbar_stage_1_4_cfg_2_4_qs;
  logic [4:0] cfg_xbar_stage_1_4_cfg_2_4_wd;
  logic cfg_xbar_stage_1_4_cfg_2_4_we;
  logic [4:0] cfg_xbar_stage_1_4_cfg_1_4_qs;
  logic [4:0] cfg_xbar_stage_1_4_cfg_1_4_wd;
  logic cfg_xbar_stage_1_4_cfg_1_4_we;
  logic [4:0] cfg_xbar_stage_1_4_cfg_0_4_qs;
  logic [4:0] cfg_xbar_stage_1_4_cfg_0_4_wd;
  logic cfg_xbar_stage_1_4_cfg_0_4_we;
  logic [4:0] cfg_xbar_stage_1_5_cfg_5_5_qs;
  logic [4:0] cfg_xbar_stage_1_5_cfg_5_5_wd;
  logic cfg_xbar_stage_1_5_cfg_5_5_we;
  logic [4:0] cfg_xbar_stage_1_5_cfg_4_5_qs;
  logic [4:0] cfg_xbar_stage_1_5_cfg_4_5_wd;
  logic cfg_xbar_stage_1_5_cfg_4_5_we;
  logic [4:0] cfg_xbar_stage_1_5_cfg_3_5_qs;
  logic [4:0] cfg_xbar_stage_1_5_cfg_3_5_wd;
  logic cfg_xbar_stage_1_5_cfg_3_5_we;
  logic [4:0] cfg_xbar_stage_1_5_cfg_2_5_qs;
  logic [4:0] cfg_xbar_stage_1_5_cfg_2_5_wd;
  logic cfg_xbar_stage_1_5_cfg_2_5_we;
  logic [4:0] cfg_xbar_stage_1_5_cfg_1_5_qs;
  logic [4:0] cfg_xbar_stage_1_5_cfg_1_5_wd;
  logic cfg_xbar_stage_1_5_cfg_1_5_we;
  logic [4:0] cfg_xbar_stage_1_5_cfg_0_5_qs;
  logic [4:0] cfg_xbar_stage_1_5_cfg_0_5_wd;
  logic cfg_xbar_stage_1_5_cfg_0_5_we;

  // Register instances

  // Subregister 0 of Multireg xbar_slave_node_cfg
  // R[xbar_slave_node_cfg]: V(False)

  // F[xbar_slave_node_cfg_0]: 3:0
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_xbar_slave_node_cfg_xbar_slave_node_cfg_0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (xbar_slave_node_cfg_xbar_slave_node_cfg_0_we),
    .wd     (xbar_slave_node_cfg_xbar_slave_node_cfg_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.xbar_slave_node_cfg[0].q ),

    // to register interface (read)
    .qs     (xbar_slave_node_cfg_xbar_slave_node_cfg_0_qs)
  );


  // F[xbar_slave_node_cfg_1]: 7:4
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_xbar_slave_node_cfg_xbar_slave_node_cfg_1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (xbar_slave_node_cfg_xbar_slave_node_cfg_1_we),
    .wd     (xbar_slave_node_cfg_xbar_slave_node_cfg_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.xbar_slave_node_cfg[1].q ),

    // to register interface (read)
    .qs     (xbar_slave_node_cfg_xbar_slave_node_cfg_1_qs)
  );


  // F[xbar_slave_node_cfg_2]: 11:8
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_xbar_slave_node_cfg_xbar_slave_node_cfg_2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (xbar_slave_node_cfg_xbar_slave_node_cfg_2_we),
    .wd     (xbar_slave_node_cfg_xbar_slave_node_cfg_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.xbar_slave_node_cfg[2].q ),

    // to register interface (read)
    .qs     (xbar_slave_node_cfg_xbar_slave_node_cfg_2_qs)
  );


  // F[xbar_slave_node_cfg_3]: 15:12
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_xbar_slave_node_cfg_xbar_slave_node_cfg_3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (xbar_slave_node_cfg_xbar_slave_node_cfg_3_we),
    .wd     (xbar_slave_node_cfg_xbar_slave_node_cfg_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.xbar_slave_node_cfg[3].q ),

    // to register interface (read)
    .qs     (xbar_slave_node_cfg_xbar_slave_node_cfg_3_qs)
  );



  // R[cfg_complex_i]: V(False)

  //   F[ack_err]: 7:0
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_cfg_complex_i_ack_err (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cfg_complex_i_ack_err_we),
    .wd     (cfg_complex_i_ack_err_wd),

    // from internal hardware
    .de     (hw2reg.cfg_complex_i.ack_err.de),
    .d      (hw2reg.cfg_complex_i.ack_err.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cfg_complex_i.ack_err.q ),

    // to register interface (read)
    .qs     (cfg_complex_i_ack_err_qs)
  );


  //   F[slice_enable]: 15:8
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_cfg_complex_i_slice_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cfg_complex_i_slice_enable_we),
    .wd     (cfg_complex_i_slice_enable_wd),

    // from internal hardware
    .de     (hw2reg.cfg_complex_i.slice_enable.de),
    .d      (hw2reg.cfg_complex_i.slice_enable.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cfg_complex_i.slice_enable.q ),

    // to register interface (read)
    .qs     (cfg_complex_i_slice_enable_qs)
  );


  //   F[select_stream]: 23:16
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_cfg_complex_i_select_stream (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cfg_complex_i_select_stream_we),
    .wd     (cfg_complex_i_select_stream_wd),

    // from internal hardware
    .de     (hw2reg.cfg_complex_i.select_stream.de),
    .d      (hw2reg.cfg_complex_i.select_stream.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cfg_complex_i.select_stream.q ),

    // to register interface (read)
    .qs     (cfg_complex_i_select_stream_qs)
  );


  //   F[fc_enable]: 24:24
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_cfg_complex_i_fc_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cfg_complex_i_fc_enable_we),
    .wd     (cfg_complex_i_fc_enable_wd),

    // from internal hardware
    .de     (hw2reg.cfg_complex_i.fc_enable.de),
    .d      (hw2reg.cfg_complex_i.fc_enable.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cfg_complex_i.fc_enable.q ),

    // to register interface (read)
    .qs     (cfg_complex_i_fc_enable_qs)
  );


  // R[cfg_xbar_barrier_i]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_cfg_xbar_barrier_i (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cfg_xbar_barrier_i_we),
    .wd     (cfg_xbar_barrier_i_wd),

    // from internal hardware
    .de     (hw2reg.cfg_xbar_barrier_i.de),
    .d      (hw2reg.cfg_xbar_barrier_i.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cfg_xbar_barrier_i.q ),

    // to register interface (read)
    .qs     (cfg_xbar_barrier_i_qs)
  );


  // R[cfg_xbar_synch_i]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_cfg_xbar_synch_i (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cfg_xbar_synch_i_we),
    .wd     (cfg_xbar_synch_i_wd),

    // from internal hardware
    .de     (hw2reg.cfg_xbar_synch_i.de),
    .d      (hw2reg.cfg_xbar_synch_i.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cfg_xbar_synch_i.q ),

    // to register interface (read)
    .qs     (cfg_xbar_synch_i_qs)
  );



  // Subregister 0 of Multireg cfg_xbar_stage_0
  // R[cfg_xbar_stage_0_0]: V(False)

  // F[cfg_5_0]: 6:2
  prim_subreg #(
    .DW      (5),
    .SWACCESS("RW"),
    .RESVAL  (5'h0)
  ) u_cfg_xbar_stage_0_0_cfg_5_0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cfg_xbar_stage_0_0_cfg_5_0_we),
    .wd     (cfg_xbar_stage_0_0_cfg_5_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cfg_xbar_stage_0[0].cfg_5.q ),

    // to register interface (read)
    .qs     (cfg_xbar_stage_0_0_cfg_5_0_qs)
  );


  // F[cfg_4_0]: 11:7
  prim_subreg #(
    .DW      (5),
    .SWACCESS("RW"),
    .RESVAL  (5'h0)
  ) u_cfg_xbar_stage_0_0_cfg_4_0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cfg_xbar_stage_0_0_cfg_4_0_we),
    .wd     (cfg_xbar_stage_0_0_cfg_4_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cfg_xbar_stage_0[0].cfg_4.q ),

    // to register interface (read)
    .qs     (cfg_xbar_stage_0_0_cfg_4_0_qs)
  );


  // F[cfg_3_0]: 16:12
  prim_subreg #(
    .DW      (5),
    .SWACCESS("RW"),
    .RESVAL  (5'h0)
  ) u_cfg_xbar_stage_0_0_cfg_3_0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cfg_xbar_stage_0_0_cfg_3_0_we),
    .wd     (cfg_xbar_stage_0_0_cfg_3_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cfg_xbar_stage_0[0].cfg_3.q ),

    // to register interface (read)
    .qs     (cfg_xbar_stage_0_0_cfg_3_0_qs)
  );


  // F[cfg_2_0]: 21:17
  prim_subreg #(
    .DW      (5),
    .SWACCESS("RW"),
    .RESVAL  (5'h0)
  ) u_cfg_xbar_stage_0_0_cfg_2_0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cfg_xbar_stage_0_0_cfg_2_0_we),
    .wd     (cfg_xbar_stage_0_0_cfg_2_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cfg_xbar_stage_0[0].cfg_2.q ),

    // to register interface (read)
    .qs     (cfg_xbar_stage_0_0_cfg_2_0_qs)
  );


  // F[cfg_1_0]: 26:22
  prim_subreg #(
    .DW      (5),
    .SWACCESS("RW"),
    .RESVAL  (5'h0)
  ) u_cfg_xbar_stage_0_0_cfg_1_0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cfg_xbar_stage_0_0_cfg_1_0_we),
    .wd     (cfg_xbar_stage_0_0_cfg_1_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cfg_xbar_stage_0[0].cfg_1.q ),

    // to register interface (read)
    .qs     (cfg_xbar_stage_0_0_cfg_1_0_qs)
  );


  // F[cfg_0_0]: 31:27
  prim_subreg #(
    .DW      (5),
    .SWACCESS("RW"),
    .RESVAL  (5'h0)
  ) u_cfg_xbar_stage_0_0_cfg_0_0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cfg_xbar_stage_0_0_cfg_0_0_we),
    .wd     (cfg_xbar_stage_0_0_cfg_0_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cfg_xbar_stage_0[0].cfg_0.q ),

    // to register interface (read)
    .qs     (cfg_xbar_stage_0_0_cfg_0_0_qs)
  );


  // Subregister 1 of Multireg cfg_xbar_stage_0
  // R[cfg_xbar_stage_0_1]: V(False)

  // F[cfg_5_1]: 6:2
  prim_subreg #(
    .DW      (5),
    .SWACCESS("RW"),
    .RESVAL  (5'h0)
  ) u_cfg_xbar_stage_0_1_cfg_5_1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cfg_xbar_stage_0_1_cfg_5_1_we),
    .wd     (cfg_xbar_stage_0_1_cfg_5_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cfg_xbar_stage_0[1].cfg_5.q ),

    // to register interface (read)
    .qs     (cfg_xbar_stage_0_1_cfg_5_1_qs)
  );


  // F[cfg_4_1]: 11:7
  prim_subreg #(
    .DW      (5),
    .SWACCESS("RW"),
    .RESVAL  (5'h0)
  ) u_cfg_xbar_stage_0_1_cfg_4_1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cfg_xbar_stage_0_1_cfg_4_1_we),
    .wd     (cfg_xbar_stage_0_1_cfg_4_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cfg_xbar_stage_0[1].cfg_4.q ),

    // to register interface (read)
    .qs     (cfg_xbar_stage_0_1_cfg_4_1_qs)
  );


  // F[cfg_3_1]: 16:12
  prim_subreg #(
    .DW      (5),
    .SWACCESS("RW"),
    .RESVAL  (5'h0)
  ) u_cfg_xbar_stage_0_1_cfg_3_1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cfg_xbar_stage_0_1_cfg_3_1_we),
    .wd     (cfg_xbar_stage_0_1_cfg_3_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cfg_xbar_stage_0[1].cfg_3.q ),

    // to register interface (read)
    .qs     (cfg_xbar_stage_0_1_cfg_3_1_qs)
  );


  // F[cfg_2_1]: 21:17
  prim_subreg #(
    .DW      (5),
    .SWACCESS("RW"),
    .RESVAL  (5'h0)
  ) u_cfg_xbar_stage_0_1_cfg_2_1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cfg_xbar_stage_0_1_cfg_2_1_we),
    .wd     (cfg_xbar_stage_0_1_cfg_2_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cfg_xbar_stage_0[1].cfg_2.q ),

    // to register interface (read)
    .qs     (cfg_xbar_stage_0_1_cfg_2_1_qs)
  );


  // F[cfg_1_1]: 26:22
  prim_subreg #(
    .DW      (5),
    .SWACCESS("RW"),
    .RESVAL  (5'h0)
  ) u_cfg_xbar_stage_0_1_cfg_1_1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cfg_xbar_stage_0_1_cfg_1_1_we),
    .wd     (cfg_xbar_stage_0_1_cfg_1_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cfg_xbar_stage_0[1].cfg_1.q ),

    // to register interface (read)
    .qs     (cfg_xbar_stage_0_1_cfg_1_1_qs)
  );


  // F[cfg_0_1]: 31:27
  prim_subreg #(
    .DW      (5),
    .SWACCESS("RW"),
    .RESVAL  (5'h0)
  ) u_cfg_xbar_stage_0_1_cfg_0_1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cfg_xbar_stage_0_1_cfg_0_1_we),
    .wd     (cfg_xbar_stage_0_1_cfg_0_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cfg_xbar_stage_0[1].cfg_0.q ),

    // to register interface (read)
    .qs     (cfg_xbar_stage_0_1_cfg_0_1_qs)
  );


  // Subregister 2 of Multireg cfg_xbar_stage_0
  // R[cfg_xbar_stage_0_2]: V(False)

  // F[cfg_5_2]: 6:2
  prim_subreg #(
    .DW      (5),
    .SWACCESS("RW"),
    .RESVAL  (5'h0)
  ) u_cfg_xbar_stage_0_2_cfg_5_2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cfg_xbar_stage_0_2_cfg_5_2_we),
    .wd     (cfg_xbar_stage_0_2_cfg_5_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cfg_xbar_stage_0[2].cfg_5.q ),

    // to register interface (read)
    .qs     (cfg_xbar_stage_0_2_cfg_5_2_qs)
  );


  // F[cfg_4_2]: 11:7
  prim_subreg #(
    .DW      (5),
    .SWACCESS("RW"),
    .RESVAL  (5'h0)
  ) u_cfg_xbar_stage_0_2_cfg_4_2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cfg_xbar_stage_0_2_cfg_4_2_we),
    .wd     (cfg_xbar_stage_0_2_cfg_4_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cfg_xbar_stage_0[2].cfg_4.q ),

    // to register interface (read)
    .qs     (cfg_xbar_stage_0_2_cfg_4_2_qs)
  );


  // F[cfg_3_2]: 16:12
  prim_subreg #(
    .DW      (5),
    .SWACCESS("RW"),
    .RESVAL  (5'h0)
  ) u_cfg_xbar_stage_0_2_cfg_3_2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cfg_xbar_stage_0_2_cfg_3_2_we),
    .wd     (cfg_xbar_stage_0_2_cfg_3_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cfg_xbar_stage_0[2].cfg_3.q ),

    // to register interface (read)
    .qs     (cfg_xbar_stage_0_2_cfg_3_2_qs)
  );


  // F[cfg_2_2]: 21:17
  prim_subreg #(
    .DW      (5),
    .SWACCESS("RW"),
    .RESVAL  (5'h0)
  ) u_cfg_xbar_stage_0_2_cfg_2_2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cfg_xbar_stage_0_2_cfg_2_2_we),
    .wd     (cfg_xbar_stage_0_2_cfg_2_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cfg_xbar_stage_0[2].cfg_2.q ),

    // to register interface (read)
    .qs     (cfg_xbar_stage_0_2_cfg_2_2_qs)
  );


  // F[cfg_1_2]: 26:22
  prim_subreg #(
    .DW      (5),
    .SWACCESS("RW"),
    .RESVAL  (5'h0)
  ) u_cfg_xbar_stage_0_2_cfg_1_2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cfg_xbar_stage_0_2_cfg_1_2_we),
    .wd     (cfg_xbar_stage_0_2_cfg_1_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cfg_xbar_stage_0[2].cfg_1.q ),

    // to register interface (read)
    .qs     (cfg_xbar_stage_0_2_cfg_1_2_qs)
  );


  // F[cfg_0_2]: 31:27
  prim_subreg #(
    .DW      (5),
    .SWACCESS("RW"),
    .RESVAL  (5'h0)
  ) u_cfg_xbar_stage_0_2_cfg_0_2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cfg_xbar_stage_0_2_cfg_0_2_we),
    .wd     (cfg_xbar_stage_0_2_cfg_0_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cfg_xbar_stage_0[2].cfg_0.q ),

    // to register interface (read)
    .qs     (cfg_xbar_stage_0_2_cfg_0_2_qs)
  );


  // Subregister 3 of Multireg cfg_xbar_stage_0
  // R[cfg_xbar_stage_0_3]: V(False)

  // F[cfg_5_3]: 6:2
  prim_subreg #(
    .DW      (5),
    .SWACCESS("RW"),
    .RESVAL  (5'h0)
  ) u_cfg_xbar_stage_0_3_cfg_5_3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cfg_xbar_stage_0_3_cfg_5_3_we),
    .wd     (cfg_xbar_stage_0_3_cfg_5_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cfg_xbar_stage_0[3].cfg_5.q ),

    // to register interface (read)
    .qs     (cfg_xbar_stage_0_3_cfg_5_3_qs)
  );


  // F[cfg_4_3]: 11:7
  prim_subreg #(
    .DW      (5),
    .SWACCESS("RW"),
    .RESVAL  (5'h0)
  ) u_cfg_xbar_stage_0_3_cfg_4_3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cfg_xbar_stage_0_3_cfg_4_3_we),
    .wd     (cfg_xbar_stage_0_3_cfg_4_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cfg_xbar_stage_0[3].cfg_4.q ),

    // to register interface (read)
    .qs     (cfg_xbar_stage_0_3_cfg_4_3_qs)
  );


  // F[cfg_3_3]: 16:12
  prim_subreg #(
    .DW      (5),
    .SWACCESS("RW"),
    .RESVAL  (5'h0)
  ) u_cfg_xbar_stage_0_3_cfg_3_3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cfg_xbar_stage_0_3_cfg_3_3_we),
    .wd     (cfg_xbar_stage_0_3_cfg_3_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cfg_xbar_stage_0[3].cfg_3.q ),

    // to register interface (read)
    .qs     (cfg_xbar_stage_0_3_cfg_3_3_qs)
  );


  // F[cfg_2_3]: 21:17
  prim_subreg #(
    .DW      (5),
    .SWACCESS("RW"),
    .RESVAL  (5'h0)
  ) u_cfg_xbar_stage_0_3_cfg_2_3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cfg_xbar_stage_0_3_cfg_2_3_we),
    .wd     (cfg_xbar_stage_0_3_cfg_2_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cfg_xbar_stage_0[3].cfg_2.q ),

    // to register interface (read)
    .qs     (cfg_xbar_stage_0_3_cfg_2_3_qs)
  );


  // F[cfg_1_3]: 26:22
  prim_subreg #(
    .DW      (5),
    .SWACCESS("RW"),
    .RESVAL  (5'h0)
  ) u_cfg_xbar_stage_0_3_cfg_1_3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cfg_xbar_stage_0_3_cfg_1_3_we),
    .wd     (cfg_xbar_stage_0_3_cfg_1_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cfg_xbar_stage_0[3].cfg_1.q ),

    // to register interface (read)
    .qs     (cfg_xbar_stage_0_3_cfg_1_3_qs)
  );


  // F[cfg_0_3]: 31:27
  prim_subreg #(
    .DW      (5),
    .SWACCESS("RW"),
    .RESVAL  (5'h0)
  ) u_cfg_xbar_stage_0_3_cfg_0_3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cfg_xbar_stage_0_3_cfg_0_3_we),
    .wd     (cfg_xbar_stage_0_3_cfg_0_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cfg_xbar_stage_0[3].cfg_0.q ),

    // to register interface (read)
    .qs     (cfg_xbar_stage_0_3_cfg_0_3_qs)
  );


  // Subregister 4 of Multireg cfg_xbar_stage_0
  // R[cfg_xbar_stage_0_4]: V(False)

  // F[cfg_5_4]: 6:2
  prim_subreg #(
    .DW      (5),
    .SWACCESS("RW"),
    .RESVAL  (5'h0)
  ) u_cfg_xbar_stage_0_4_cfg_5_4 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cfg_xbar_stage_0_4_cfg_5_4_we),
    .wd     (cfg_xbar_stage_0_4_cfg_5_4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cfg_xbar_stage_0[4].cfg_5.q ),

    // to register interface (read)
    .qs     (cfg_xbar_stage_0_4_cfg_5_4_qs)
  );


  // F[cfg_4_4]: 11:7
  prim_subreg #(
    .DW      (5),
    .SWACCESS("RW"),
    .RESVAL  (5'h0)
  ) u_cfg_xbar_stage_0_4_cfg_4_4 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cfg_xbar_stage_0_4_cfg_4_4_we),
    .wd     (cfg_xbar_stage_0_4_cfg_4_4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cfg_xbar_stage_0[4].cfg_4.q ),

    // to register interface (read)
    .qs     (cfg_xbar_stage_0_4_cfg_4_4_qs)
  );


  // F[cfg_3_4]: 16:12
  prim_subreg #(
    .DW      (5),
    .SWACCESS("RW"),
    .RESVAL  (5'h0)
  ) u_cfg_xbar_stage_0_4_cfg_3_4 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cfg_xbar_stage_0_4_cfg_3_4_we),
    .wd     (cfg_xbar_stage_0_4_cfg_3_4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cfg_xbar_stage_0[4].cfg_3.q ),

    // to register interface (read)
    .qs     (cfg_xbar_stage_0_4_cfg_3_4_qs)
  );


  // F[cfg_2_4]: 21:17
  prim_subreg #(
    .DW      (5),
    .SWACCESS("RW"),
    .RESVAL  (5'h0)
  ) u_cfg_xbar_stage_0_4_cfg_2_4 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cfg_xbar_stage_0_4_cfg_2_4_we),
    .wd     (cfg_xbar_stage_0_4_cfg_2_4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cfg_xbar_stage_0[4].cfg_2.q ),

    // to register interface (read)
    .qs     (cfg_xbar_stage_0_4_cfg_2_4_qs)
  );


  // F[cfg_1_4]: 26:22
  prim_subreg #(
    .DW      (5),
    .SWACCESS("RW"),
    .RESVAL  (5'h0)
  ) u_cfg_xbar_stage_0_4_cfg_1_4 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cfg_xbar_stage_0_4_cfg_1_4_we),
    .wd     (cfg_xbar_stage_0_4_cfg_1_4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cfg_xbar_stage_0[4].cfg_1.q ),

    // to register interface (read)
    .qs     (cfg_xbar_stage_0_4_cfg_1_4_qs)
  );


  // F[cfg_0_4]: 31:27
  prim_subreg #(
    .DW      (5),
    .SWACCESS("RW"),
    .RESVAL  (5'h0)
  ) u_cfg_xbar_stage_0_4_cfg_0_4 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cfg_xbar_stage_0_4_cfg_0_4_we),
    .wd     (cfg_xbar_stage_0_4_cfg_0_4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cfg_xbar_stage_0[4].cfg_0.q ),

    // to register interface (read)
    .qs     (cfg_xbar_stage_0_4_cfg_0_4_qs)
  );


  // Subregister 5 of Multireg cfg_xbar_stage_0
  // R[cfg_xbar_stage_0_5]: V(False)

  // F[cfg_5_5]: 6:2
  prim_subreg #(
    .DW      (5),
    .SWACCESS("RW"),
    .RESVAL  (5'h0)
  ) u_cfg_xbar_stage_0_5_cfg_5_5 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cfg_xbar_stage_0_5_cfg_5_5_we),
    .wd     (cfg_xbar_stage_0_5_cfg_5_5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cfg_xbar_stage_0[5].cfg_5.q ),

    // to register interface (read)
    .qs     (cfg_xbar_stage_0_5_cfg_5_5_qs)
  );


  // F[cfg_4_5]: 11:7
  prim_subreg #(
    .DW      (5),
    .SWACCESS("RW"),
    .RESVAL  (5'h0)
  ) u_cfg_xbar_stage_0_5_cfg_4_5 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cfg_xbar_stage_0_5_cfg_4_5_we),
    .wd     (cfg_xbar_stage_0_5_cfg_4_5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cfg_xbar_stage_0[5].cfg_4.q ),

    // to register interface (read)
    .qs     (cfg_xbar_stage_0_5_cfg_4_5_qs)
  );


  // F[cfg_3_5]: 16:12
  prim_subreg #(
    .DW      (5),
    .SWACCESS("RW"),
    .RESVAL  (5'h0)
  ) u_cfg_xbar_stage_0_5_cfg_3_5 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cfg_xbar_stage_0_5_cfg_3_5_we),
    .wd     (cfg_xbar_stage_0_5_cfg_3_5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cfg_xbar_stage_0[5].cfg_3.q ),

    // to register interface (read)
    .qs     (cfg_xbar_stage_0_5_cfg_3_5_qs)
  );


  // F[cfg_2_5]: 21:17
  prim_subreg #(
    .DW      (5),
    .SWACCESS("RW"),
    .RESVAL  (5'h0)
  ) u_cfg_xbar_stage_0_5_cfg_2_5 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cfg_xbar_stage_0_5_cfg_2_5_we),
    .wd     (cfg_xbar_stage_0_5_cfg_2_5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cfg_xbar_stage_0[5].cfg_2.q ),

    // to register interface (read)
    .qs     (cfg_xbar_stage_0_5_cfg_2_5_qs)
  );


  // F[cfg_1_5]: 26:22
  prim_subreg #(
    .DW      (5),
    .SWACCESS("RW"),
    .RESVAL  (5'h0)
  ) u_cfg_xbar_stage_0_5_cfg_1_5 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cfg_xbar_stage_0_5_cfg_1_5_we),
    .wd     (cfg_xbar_stage_0_5_cfg_1_5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cfg_xbar_stage_0[5].cfg_1.q ),

    // to register interface (read)
    .qs     (cfg_xbar_stage_0_5_cfg_1_5_qs)
  );


  // F[cfg_0_5]: 31:27
  prim_subreg #(
    .DW      (5),
    .SWACCESS("RW"),
    .RESVAL  (5'h0)
  ) u_cfg_xbar_stage_0_5_cfg_0_5 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cfg_xbar_stage_0_5_cfg_0_5_we),
    .wd     (cfg_xbar_stage_0_5_cfg_0_5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cfg_xbar_stage_0[5].cfg_0.q ),

    // to register interface (read)
    .qs     (cfg_xbar_stage_0_5_cfg_0_5_qs)
  );


  // Subregister 6 of Multireg cfg_xbar_stage_0
  // R[cfg_xbar_stage_0_6]: V(False)

  // F[cfg_5_6]: 6:2
  prim_subreg #(
    .DW      (5),
    .SWACCESS("RW"),
    .RESVAL  (5'h0)
  ) u_cfg_xbar_stage_0_6_cfg_5_6 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cfg_xbar_stage_0_6_cfg_5_6_we),
    .wd     (cfg_xbar_stage_0_6_cfg_5_6_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cfg_xbar_stage_0[6].cfg_5.q ),

    // to register interface (read)
    .qs     (cfg_xbar_stage_0_6_cfg_5_6_qs)
  );


  // F[cfg_4_6]: 11:7
  prim_subreg #(
    .DW      (5),
    .SWACCESS("RW"),
    .RESVAL  (5'h0)
  ) u_cfg_xbar_stage_0_6_cfg_4_6 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cfg_xbar_stage_0_6_cfg_4_6_we),
    .wd     (cfg_xbar_stage_0_6_cfg_4_6_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cfg_xbar_stage_0[6].cfg_4.q ),

    // to register interface (read)
    .qs     (cfg_xbar_stage_0_6_cfg_4_6_qs)
  );


  // F[cfg_3_6]: 16:12
  prim_subreg #(
    .DW      (5),
    .SWACCESS("RW"),
    .RESVAL  (5'h0)
  ) u_cfg_xbar_stage_0_6_cfg_3_6 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cfg_xbar_stage_0_6_cfg_3_6_we),
    .wd     (cfg_xbar_stage_0_6_cfg_3_6_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cfg_xbar_stage_0[6].cfg_3.q ),

    // to register interface (read)
    .qs     (cfg_xbar_stage_0_6_cfg_3_6_qs)
  );


  // F[cfg_2_6]: 21:17
  prim_subreg #(
    .DW      (5),
    .SWACCESS("RW"),
    .RESVAL  (5'h0)
  ) u_cfg_xbar_stage_0_6_cfg_2_6 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cfg_xbar_stage_0_6_cfg_2_6_we),
    .wd     (cfg_xbar_stage_0_6_cfg_2_6_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cfg_xbar_stage_0[6].cfg_2.q ),

    // to register interface (read)
    .qs     (cfg_xbar_stage_0_6_cfg_2_6_qs)
  );


  // F[cfg_1_6]: 26:22
  prim_subreg #(
    .DW      (5),
    .SWACCESS("RW"),
    .RESVAL  (5'h0)
  ) u_cfg_xbar_stage_0_6_cfg_1_6 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cfg_xbar_stage_0_6_cfg_1_6_we),
    .wd     (cfg_xbar_stage_0_6_cfg_1_6_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cfg_xbar_stage_0[6].cfg_1.q ),

    // to register interface (read)
    .qs     (cfg_xbar_stage_0_6_cfg_1_6_qs)
  );


  // F[cfg_0_6]: 31:27
  prim_subreg #(
    .DW      (5),
    .SWACCESS("RW"),
    .RESVAL  (5'h0)
  ) u_cfg_xbar_stage_0_6_cfg_0_6 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cfg_xbar_stage_0_6_cfg_0_6_we),
    .wd     (cfg_xbar_stage_0_6_cfg_0_6_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cfg_xbar_stage_0[6].cfg_0.q ),

    // to register interface (read)
    .qs     (cfg_xbar_stage_0_6_cfg_0_6_qs)
  );


  // Subregister 7 of Multireg cfg_xbar_stage_0
  // R[cfg_xbar_stage_0_7]: V(False)

  // F[cfg_5_7]: 6:2
  prim_subreg #(
    .DW      (5),
    .SWACCESS("RW"),
    .RESVAL  (5'h0)
  ) u_cfg_xbar_stage_0_7_cfg_5_7 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cfg_xbar_stage_0_7_cfg_5_7_we),
    .wd     (cfg_xbar_stage_0_7_cfg_5_7_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cfg_xbar_stage_0[7].cfg_5.q ),

    // to register interface (read)
    .qs     (cfg_xbar_stage_0_7_cfg_5_7_qs)
  );


  // F[cfg_4_7]: 11:7
  prim_subreg #(
    .DW      (5),
    .SWACCESS("RW"),
    .RESVAL  (5'h0)
  ) u_cfg_xbar_stage_0_7_cfg_4_7 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cfg_xbar_stage_0_7_cfg_4_7_we),
    .wd     (cfg_xbar_stage_0_7_cfg_4_7_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cfg_xbar_stage_0[7].cfg_4.q ),

    // to register interface (read)
    .qs     (cfg_xbar_stage_0_7_cfg_4_7_qs)
  );


  // F[cfg_3_7]: 16:12
  prim_subreg #(
    .DW      (5),
    .SWACCESS("RW"),
    .RESVAL  (5'h0)
  ) u_cfg_xbar_stage_0_7_cfg_3_7 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cfg_xbar_stage_0_7_cfg_3_7_we),
    .wd     (cfg_xbar_stage_0_7_cfg_3_7_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cfg_xbar_stage_0[7].cfg_3.q ),

    // to register interface (read)
    .qs     (cfg_xbar_stage_0_7_cfg_3_7_qs)
  );


  // F[cfg_2_7]: 21:17
  prim_subreg #(
    .DW      (5),
    .SWACCESS("RW"),
    .RESVAL  (5'h0)
  ) u_cfg_xbar_stage_0_7_cfg_2_7 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cfg_xbar_stage_0_7_cfg_2_7_we),
    .wd     (cfg_xbar_stage_0_7_cfg_2_7_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cfg_xbar_stage_0[7].cfg_2.q ),

    // to register interface (read)
    .qs     (cfg_xbar_stage_0_7_cfg_2_7_qs)
  );


  // F[cfg_1_7]: 26:22
  prim_subreg #(
    .DW      (5),
    .SWACCESS("RW"),
    .RESVAL  (5'h0)
  ) u_cfg_xbar_stage_0_7_cfg_1_7 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cfg_xbar_stage_0_7_cfg_1_7_we),
    .wd     (cfg_xbar_stage_0_7_cfg_1_7_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cfg_xbar_stage_0[7].cfg_1.q ),

    // to register interface (read)
    .qs     (cfg_xbar_stage_0_7_cfg_1_7_qs)
  );


  // F[cfg_0_7]: 31:27
  prim_subreg #(
    .DW      (5),
    .SWACCESS("RW"),
    .RESVAL  (5'h0)
  ) u_cfg_xbar_stage_0_7_cfg_0_7 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cfg_xbar_stage_0_7_cfg_0_7_we),
    .wd     (cfg_xbar_stage_0_7_cfg_0_7_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cfg_xbar_stage_0[7].cfg_0.q ),

    // to register interface (read)
    .qs     (cfg_xbar_stage_0_7_cfg_0_7_qs)
  );




  // Subregister 0 of Multireg cfg_xbar_stage_1
  // R[cfg_xbar_stage_1_0]: V(False)

  // F[cfg_5_0]: 6:2
  prim_subreg #(
    .DW      (5),
    .SWACCESS("RW"),
    .RESVAL  (5'h0)
  ) u_cfg_xbar_stage_1_0_cfg_5_0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cfg_xbar_stage_1_0_cfg_5_0_we),
    .wd     (cfg_xbar_stage_1_0_cfg_5_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cfg_xbar_stage_1[0].cfg_5.q ),

    // to register interface (read)
    .qs     (cfg_xbar_stage_1_0_cfg_5_0_qs)
  );


  // F[cfg_4_0]: 11:7
  prim_subreg #(
    .DW      (5),
    .SWACCESS("RW"),
    .RESVAL  (5'h0)
  ) u_cfg_xbar_stage_1_0_cfg_4_0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cfg_xbar_stage_1_0_cfg_4_0_we),
    .wd     (cfg_xbar_stage_1_0_cfg_4_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cfg_xbar_stage_1[0].cfg_4.q ),

    // to register interface (read)
    .qs     (cfg_xbar_stage_1_0_cfg_4_0_qs)
  );


  // F[cfg_3_0]: 16:12
  prim_subreg #(
    .DW      (5),
    .SWACCESS("RW"),
    .RESVAL  (5'h0)
  ) u_cfg_xbar_stage_1_0_cfg_3_0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cfg_xbar_stage_1_0_cfg_3_0_we),
    .wd     (cfg_xbar_stage_1_0_cfg_3_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cfg_xbar_stage_1[0].cfg_3.q ),

    // to register interface (read)
    .qs     (cfg_xbar_stage_1_0_cfg_3_0_qs)
  );


  // F[cfg_2_0]: 21:17
  prim_subreg #(
    .DW      (5),
    .SWACCESS("RW"),
    .RESVAL  (5'h0)
  ) u_cfg_xbar_stage_1_0_cfg_2_0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cfg_xbar_stage_1_0_cfg_2_0_we),
    .wd     (cfg_xbar_stage_1_0_cfg_2_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cfg_xbar_stage_1[0].cfg_2.q ),

    // to register interface (read)
    .qs     (cfg_xbar_stage_1_0_cfg_2_0_qs)
  );


  // F[cfg_1_0]: 26:22
  prim_subreg #(
    .DW      (5),
    .SWACCESS("RW"),
    .RESVAL  (5'h0)
  ) u_cfg_xbar_stage_1_0_cfg_1_0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cfg_xbar_stage_1_0_cfg_1_0_we),
    .wd     (cfg_xbar_stage_1_0_cfg_1_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cfg_xbar_stage_1[0].cfg_1.q ),

    // to register interface (read)
    .qs     (cfg_xbar_stage_1_0_cfg_1_0_qs)
  );


  // F[cfg_0_0]: 31:27
  prim_subreg #(
    .DW      (5),
    .SWACCESS("RW"),
    .RESVAL  (5'h0)
  ) u_cfg_xbar_stage_1_0_cfg_0_0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cfg_xbar_stage_1_0_cfg_0_0_we),
    .wd     (cfg_xbar_stage_1_0_cfg_0_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cfg_xbar_stage_1[0].cfg_0.q ),

    // to register interface (read)
    .qs     (cfg_xbar_stage_1_0_cfg_0_0_qs)
  );


  // Subregister 1 of Multireg cfg_xbar_stage_1
  // R[cfg_xbar_stage_1_1]: V(False)

  // F[cfg_5_1]: 6:2
  prim_subreg #(
    .DW      (5),
    .SWACCESS("RW"),
    .RESVAL  (5'h0)
  ) u_cfg_xbar_stage_1_1_cfg_5_1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cfg_xbar_stage_1_1_cfg_5_1_we),
    .wd     (cfg_xbar_stage_1_1_cfg_5_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cfg_xbar_stage_1[1].cfg_5.q ),

    // to register interface (read)
    .qs     (cfg_xbar_stage_1_1_cfg_5_1_qs)
  );


  // F[cfg_4_1]: 11:7
  prim_subreg #(
    .DW      (5),
    .SWACCESS("RW"),
    .RESVAL  (5'h0)
  ) u_cfg_xbar_stage_1_1_cfg_4_1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cfg_xbar_stage_1_1_cfg_4_1_we),
    .wd     (cfg_xbar_stage_1_1_cfg_4_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cfg_xbar_stage_1[1].cfg_4.q ),

    // to register interface (read)
    .qs     (cfg_xbar_stage_1_1_cfg_4_1_qs)
  );


  // F[cfg_3_1]: 16:12
  prim_subreg #(
    .DW      (5),
    .SWACCESS("RW"),
    .RESVAL  (5'h0)
  ) u_cfg_xbar_stage_1_1_cfg_3_1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cfg_xbar_stage_1_1_cfg_3_1_we),
    .wd     (cfg_xbar_stage_1_1_cfg_3_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cfg_xbar_stage_1[1].cfg_3.q ),

    // to register interface (read)
    .qs     (cfg_xbar_stage_1_1_cfg_3_1_qs)
  );


  // F[cfg_2_1]: 21:17
  prim_subreg #(
    .DW      (5),
    .SWACCESS("RW"),
    .RESVAL  (5'h0)
  ) u_cfg_xbar_stage_1_1_cfg_2_1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cfg_xbar_stage_1_1_cfg_2_1_we),
    .wd     (cfg_xbar_stage_1_1_cfg_2_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cfg_xbar_stage_1[1].cfg_2.q ),

    // to register interface (read)
    .qs     (cfg_xbar_stage_1_1_cfg_2_1_qs)
  );


  // F[cfg_1_1]: 26:22
  prim_subreg #(
    .DW      (5),
    .SWACCESS("RW"),
    .RESVAL  (5'h0)
  ) u_cfg_xbar_stage_1_1_cfg_1_1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cfg_xbar_stage_1_1_cfg_1_1_we),
    .wd     (cfg_xbar_stage_1_1_cfg_1_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cfg_xbar_stage_1[1].cfg_1.q ),

    // to register interface (read)
    .qs     (cfg_xbar_stage_1_1_cfg_1_1_qs)
  );


  // F[cfg_0_1]: 31:27
  prim_subreg #(
    .DW      (5),
    .SWACCESS("RW"),
    .RESVAL  (5'h0)
  ) u_cfg_xbar_stage_1_1_cfg_0_1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cfg_xbar_stage_1_1_cfg_0_1_we),
    .wd     (cfg_xbar_stage_1_1_cfg_0_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cfg_xbar_stage_1[1].cfg_0.q ),

    // to register interface (read)
    .qs     (cfg_xbar_stage_1_1_cfg_0_1_qs)
  );


  // Subregister 2 of Multireg cfg_xbar_stage_1
  // R[cfg_xbar_stage_1_2]: V(False)

  // F[cfg_5_2]: 6:2
  prim_subreg #(
    .DW      (5),
    .SWACCESS("RW"),
    .RESVAL  (5'h0)
  ) u_cfg_xbar_stage_1_2_cfg_5_2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cfg_xbar_stage_1_2_cfg_5_2_we),
    .wd     (cfg_xbar_stage_1_2_cfg_5_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cfg_xbar_stage_1[2].cfg_5.q ),

    // to register interface (read)
    .qs     (cfg_xbar_stage_1_2_cfg_5_2_qs)
  );


  // F[cfg_4_2]: 11:7
  prim_subreg #(
    .DW      (5),
    .SWACCESS("RW"),
    .RESVAL  (5'h0)
  ) u_cfg_xbar_stage_1_2_cfg_4_2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cfg_xbar_stage_1_2_cfg_4_2_we),
    .wd     (cfg_xbar_stage_1_2_cfg_4_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cfg_xbar_stage_1[2].cfg_4.q ),

    // to register interface (read)
    .qs     (cfg_xbar_stage_1_2_cfg_4_2_qs)
  );


  // F[cfg_3_2]: 16:12
  prim_subreg #(
    .DW      (5),
    .SWACCESS("RW"),
    .RESVAL  (5'h0)
  ) u_cfg_xbar_stage_1_2_cfg_3_2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cfg_xbar_stage_1_2_cfg_3_2_we),
    .wd     (cfg_xbar_stage_1_2_cfg_3_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cfg_xbar_stage_1[2].cfg_3.q ),

    // to register interface (read)
    .qs     (cfg_xbar_stage_1_2_cfg_3_2_qs)
  );


  // F[cfg_2_2]: 21:17
  prim_subreg #(
    .DW      (5),
    .SWACCESS("RW"),
    .RESVAL  (5'h0)
  ) u_cfg_xbar_stage_1_2_cfg_2_2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cfg_xbar_stage_1_2_cfg_2_2_we),
    .wd     (cfg_xbar_stage_1_2_cfg_2_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cfg_xbar_stage_1[2].cfg_2.q ),

    // to register interface (read)
    .qs     (cfg_xbar_stage_1_2_cfg_2_2_qs)
  );


  // F[cfg_1_2]: 26:22
  prim_subreg #(
    .DW      (5),
    .SWACCESS("RW"),
    .RESVAL  (5'h0)
  ) u_cfg_xbar_stage_1_2_cfg_1_2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cfg_xbar_stage_1_2_cfg_1_2_we),
    .wd     (cfg_xbar_stage_1_2_cfg_1_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cfg_xbar_stage_1[2].cfg_1.q ),

    // to register interface (read)
    .qs     (cfg_xbar_stage_1_2_cfg_1_2_qs)
  );


  // F[cfg_0_2]: 31:27
  prim_subreg #(
    .DW      (5),
    .SWACCESS("RW"),
    .RESVAL  (5'h0)
  ) u_cfg_xbar_stage_1_2_cfg_0_2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cfg_xbar_stage_1_2_cfg_0_2_we),
    .wd     (cfg_xbar_stage_1_2_cfg_0_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cfg_xbar_stage_1[2].cfg_0.q ),

    // to register interface (read)
    .qs     (cfg_xbar_stage_1_2_cfg_0_2_qs)
  );


  // Subregister 3 of Multireg cfg_xbar_stage_1
  // R[cfg_xbar_stage_1_3]: V(False)

  // F[cfg_5_3]: 6:2
  prim_subreg #(
    .DW      (5),
    .SWACCESS("RW"),
    .RESVAL  (5'h0)
  ) u_cfg_xbar_stage_1_3_cfg_5_3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cfg_xbar_stage_1_3_cfg_5_3_we),
    .wd     (cfg_xbar_stage_1_3_cfg_5_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cfg_xbar_stage_1[3].cfg_5.q ),

    // to register interface (read)
    .qs     (cfg_xbar_stage_1_3_cfg_5_3_qs)
  );


  // F[cfg_4_3]: 11:7
  prim_subreg #(
    .DW      (5),
    .SWACCESS("RW"),
    .RESVAL  (5'h0)
  ) u_cfg_xbar_stage_1_3_cfg_4_3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cfg_xbar_stage_1_3_cfg_4_3_we),
    .wd     (cfg_xbar_stage_1_3_cfg_4_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cfg_xbar_stage_1[3].cfg_4.q ),

    // to register interface (read)
    .qs     (cfg_xbar_stage_1_3_cfg_4_3_qs)
  );


  // F[cfg_3_3]: 16:12
  prim_subreg #(
    .DW      (5),
    .SWACCESS("RW"),
    .RESVAL  (5'h0)
  ) u_cfg_xbar_stage_1_3_cfg_3_3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cfg_xbar_stage_1_3_cfg_3_3_we),
    .wd     (cfg_xbar_stage_1_3_cfg_3_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cfg_xbar_stage_1[3].cfg_3.q ),

    // to register interface (read)
    .qs     (cfg_xbar_stage_1_3_cfg_3_3_qs)
  );


  // F[cfg_2_3]: 21:17
  prim_subreg #(
    .DW      (5),
    .SWACCESS("RW"),
    .RESVAL  (5'h0)
  ) u_cfg_xbar_stage_1_3_cfg_2_3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cfg_xbar_stage_1_3_cfg_2_3_we),
    .wd     (cfg_xbar_stage_1_3_cfg_2_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cfg_xbar_stage_1[3].cfg_2.q ),

    // to register interface (read)
    .qs     (cfg_xbar_stage_1_3_cfg_2_3_qs)
  );


  // F[cfg_1_3]: 26:22
  prim_subreg #(
    .DW      (5),
    .SWACCESS("RW"),
    .RESVAL  (5'h0)
  ) u_cfg_xbar_stage_1_3_cfg_1_3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cfg_xbar_stage_1_3_cfg_1_3_we),
    .wd     (cfg_xbar_stage_1_3_cfg_1_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cfg_xbar_stage_1[3].cfg_1.q ),

    // to register interface (read)
    .qs     (cfg_xbar_stage_1_3_cfg_1_3_qs)
  );


  // F[cfg_0_3]: 31:27
  prim_subreg #(
    .DW      (5),
    .SWACCESS("RW"),
    .RESVAL  (5'h0)
  ) u_cfg_xbar_stage_1_3_cfg_0_3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cfg_xbar_stage_1_3_cfg_0_3_we),
    .wd     (cfg_xbar_stage_1_3_cfg_0_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cfg_xbar_stage_1[3].cfg_0.q ),

    // to register interface (read)
    .qs     (cfg_xbar_stage_1_3_cfg_0_3_qs)
  );


  // Subregister 4 of Multireg cfg_xbar_stage_1
  // R[cfg_xbar_stage_1_4]: V(False)

  // F[cfg_5_4]: 6:2
  prim_subreg #(
    .DW      (5),
    .SWACCESS("RW"),
    .RESVAL  (5'h0)
  ) u_cfg_xbar_stage_1_4_cfg_5_4 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cfg_xbar_stage_1_4_cfg_5_4_we),
    .wd     (cfg_xbar_stage_1_4_cfg_5_4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cfg_xbar_stage_1[4].cfg_5.q ),

    // to register interface (read)
    .qs     (cfg_xbar_stage_1_4_cfg_5_4_qs)
  );


  // F[cfg_4_4]: 11:7
  prim_subreg #(
    .DW      (5),
    .SWACCESS("RW"),
    .RESVAL  (5'h0)
  ) u_cfg_xbar_stage_1_4_cfg_4_4 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cfg_xbar_stage_1_4_cfg_4_4_we),
    .wd     (cfg_xbar_stage_1_4_cfg_4_4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cfg_xbar_stage_1[4].cfg_4.q ),

    // to register interface (read)
    .qs     (cfg_xbar_stage_1_4_cfg_4_4_qs)
  );


  // F[cfg_3_4]: 16:12
  prim_subreg #(
    .DW      (5),
    .SWACCESS("RW"),
    .RESVAL  (5'h0)
  ) u_cfg_xbar_stage_1_4_cfg_3_4 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cfg_xbar_stage_1_4_cfg_3_4_we),
    .wd     (cfg_xbar_stage_1_4_cfg_3_4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cfg_xbar_stage_1[4].cfg_3.q ),

    // to register interface (read)
    .qs     (cfg_xbar_stage_1_4_cfg_3_4_qs)
  );


  // F[cfg_2_4]: 21:17
  prim_subreg #(
    .DW      (5),
    .SWACCESS("RW"),
    .RESVAL  (5'h0)
  ) u_cfg_xbar_stage_1_4_cfg_2_4 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cfg_xbar_stage_1_4_cfg_2_4_we),
    .wd     (cfg_xbar_stage_1_4_cfg_2_4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cfg_xbar_stage_1[4].cfg_2.q ),

    // to register interface (read)
    .qs     (cfg_xbar_stage_1_4_cfg_2_4_qs)
  );


  // F[cfg_1_4]: 26:22
  prim_subreg #(
    .DW      (5),
    .SWACCESS("RW"),
    .RESVAL  (5'h0)
  ) u_cfg_xbar_stage_1_4_cfg_1_4 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cfg_xbar_stage_1_4_cfg_1_4_we),
    .wd     (cfg_xbar_stage_1_4_cfg_1_4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cfg_xbar_stage_1[4].cfg_1.q ),

    // to register interface (read)
    .qs     (cfg_xbar_stage_1_4_cfg_1_4_qs)
  );


  // F[cfg_0_4]: 31:27
  prim_subreg #(
    .DW      (5),
    .SWACCESS("RW"),
    .RESVAL  (5'h0)
  ) u_cfg_xbar_stage_1_4_cfg_0_4 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cfg_xbar_stage_1_4_cfg_0_4_we),
    .wd     (cfg_xbar_stage_1_4_cfg_0_4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cfg_xbar_stage_1[4].cfg_0.q ),

    // to register interface (read)
    .qs     (cfg_xbar_stage_1_4_cfg_0_4_qs)
  );


  // Subregister 5 of Multireg cfg_xbar_stage_1
  // R[cfg_xbar_stage_1_5]: V(False)

  // F[cfg_5_5]: 6:2
  prim_subreg #(
    .DW      (5),
    .SWACCESS("RW"),
    .RESVAL  (5'h0)
  ) u_cfg_xbar_stage_1_5_cfg_5_5 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cfg_xbar_stage_1_5_cfg_5_5_we),
    .wd     (cfg_xbar_stage_1_5_cfg_5_5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cfg_xbar_stage_1[5].cfg_5.q ),

    // to register interface (read)
    .qs     (cfg_xbar_stage_1_5_cfg_5_5_qs)
  );


  // F[cfg_4_5]: 11:7
  prim_subreg #(
    .DW      (5),
    .SWACCESS("RW"),
    .RESVAL  (5'h0)
  ) u_cfg_xbar_stage_1_5_cfg_4_5 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cfg_xbar_stage_1_5_cfg_4_5_we),
    .wd     (cfg_xbar_stage_1_5_cfg_4_5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cfg_xbar_stage_1[5].cfg_4.q ),

    // to register interface (read)
    .qs     (cfg_xbar_stage_1_5_cfg_4_5_qs)
  );


  // F[cfg_3_5]: 16:12
  prim_subreg #(
    .DW      (5),
    .SWACCESS("RW"),
    .RESVAL  (5'h0)
  ) u_cfg_xbar_stage_1_5_cfg_3_5 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cfg_xbar_stage_1_5_cfg_3_5_we),
    .wd     (cfg_xbar_stage_1_5_cfg_3_5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cfg_xbar_stage_1[5].cfg_3.q ),

    // to register interface (read)
    .qs     (cfg_xbar_stage_1_5_cfg_3_5_qs)
  );


  // F[cfg_2_5]: 21:17
  prim_subreg #(
    .DW      (5),
    .SWACCESS("RW"),
    .RESVAL  (5'h0)
  ) u_cfg_xbar_stage_1_5_cfg_2_5 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cfg_xbar_stage_1_5_cfg_2_5_we),
    .wd     (cfg_xbar_stage_1_5_cfg_2_5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cfg_xbar_stage_1[5].cfg_2.q ),

    // to register interface (read)
    .qs     (cfg_xbar_stage_1_5_cfg_2_5_qs)
  );


  // F[cfg_1_5]: 26:22
  prim_subreg #(
    .DW      (5),
    .SWACCESS("RW"),
    .RESVAL  (5'h0)
  ) u_cfg_xbar_stage_1_5_cfg_1_5 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cfg_xbar_stage_1_5_cfg_1_5_we),
    .wd     (cfg_xbar_stage_1_5_cfg_1_5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cfg_xbar_stage_1[5].cfg_1.q ),

    // to register interface (read)
    .qs     (cfg_xbar_stage_1_5_cfg_1_5_qs)
  );


  // F[cfg_0_5]: 31:27
  prim_subreg #(
    .DW      (5),
    .SWACCESS("RW"),
    .RESVAL  (5'h0)
  ) u_cfg_xbar_stage_1_5_cfg_0_5 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cfg_xbar_stage_1_5_cfg_0_5_we),
    .wd     (cfg_xbar_stage_1_5_cfg_0_5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cfg_xbar_stage_1[5].cfg_0.q ),

    // to register interface (read)
    .qs     (cfg_xbar_stage_1_5_cfg_0_5_qs)
  );





  logic [17:0] addr_hit;
  always_comb begin
    addr_hit = '0;
    addr_hit[ 0] = (reg_addr == BUS_CLOCK_XBAR_SLAVE_NODE_CFG_OFFSET);
    addr_hit[ 1] = (reg_addr == BUS_CLOCK_CFG_COMPLEX_I_OFFSET);
    addr_hit[ 2] = (reg_addr == BUS_CLOCK_CFG_XBAR_BARRIER_I_OFFSET);
    addr_hit[ 3] = (reg_addr == BUS_CLOCK_CFG_XBAR_SYNCH_I_OFFSET);
    addr_hit[ 4] = (reg_addr == BUS_CLOCK_CFG_XBAR_STAGE_0_0_OFFSET);
    addr_hit[ 5] = (reg_addr == BUS_CLOCK_CFG_XBAR_STAGE_0_1_OFFSET);
    addr_hit[ 6] = (reg_addr == BUS_CLOCK_CFG_XBAR_STAGE_0_2_OFFSET);
    addr_hit[ 7] = (reg_addr == BUS_CLOCK_CFG_XBAR_STAGE_0_3_OFFSET);
    addr_hit[ 8] = (reg_addr == BUS_CLOCK_CFG_XBAR_STAGE_0_4_OFFSET);
    addr_hit[ 9] = (reg_addr == BUS_CLOCK_CFG_XBAR_STAGE_0_5_OFFSET);
    addr_hit[10] = (reg_addr == BUS_CLOCK_CFG_XBAR_STAGE_0_6_OFFSET);
    addr_hit[11] = (reg_addr == BUS_CLOCK_CFG_XBAR_STAGE_0_7_OFFSET);
    addr_hit[12] = (reg_addr == BUS_CLOCK_CFG_XBAR_STAGE_1_0_OFFSET);
    addr_hit[13] = (reg_addr == BUS_CLOCK_CFG_XBAR_STAGE_1_1_OFFSET);
    addr_hit[14] = (reg_addr == BUS_CLOCK_CFG_XBAR_STAGE_1_2_OFFSET);
    addr_hit[15] = (reg_addr == BUS_CLOCK_CFG_XBAR_STAGE_1_3_OFFSET);
    addr_hit[16] = (reg_addr == BUS_CLOCK_CFG_XBAR_STAGE_1_4_OFFSET);
    addr_hit[17] = (reg_addr == BUS_CLOCK_CFG_XBAR_STAGE_1_5_OFFSET);
  end

  assign addrmiss = (reg_re || reg_we) ? ~|addr_hit : 1'b0 ;

  // Check sub-word write is permitted
  always_comb begin
    wr_err = 1'b0;
    if (addr_hit[ 0] && reg_we && (BUS_CLOCK_PERMIT[ 0] != (BUS_CLOCK_PERMIT[ 0] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 1] && reg_we && (BUS_CLOCK_PERMIT[ 1] != (BUS_CLOCK_PERMIT[ 1] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 2] && reg_we && (BUS_CLOCK_PERMIT[ 2] != (BUS_CLOCK_PERMIT[ 2] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 3] && reg_we && (BUS_CLOCK_PERMIT[ 3] != (BUS_CLOCK_PERMIT[ 3] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 4] && reg_we && (BUS_CLOCK_PERMIT[ 4] != (BUS_CLOCK_PERMIT[ 4] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 5] && reg_we && (BUS_CLOCK_PERMIT[ 5] != (BUS_CLOCK_PERMIT[ 5] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 6] && reg_we && (BUS_CLOCK_PERMIT[ 6] != (BUS_CLOCK_PERMIT[ 6] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 7] && reg_we && (BUS_CLOCK_PERMIT[ 7] != (BUS_CLOCK_PERMIT[ 7] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 8] && reg_we && (BUS_CLOCK_PERMIT[ 8] != (BUS_CLOCK_PERMIT[ 8] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 9] && reg_we && (BUS_CLOCK_PERMIT[ 9] != (BUS_CLOCK_PERMIT[ 9] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[10] && reg_we && (BUS_CLOCK_PERMIT[10] != (BUS_CLOCK_PERMIT[10] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[11] && reg_we && (BUS_CLOCK_PERMIT[11] != (BUS_CLOCK_PERMIT[11] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[12] && reg_we && (BUS_CLOCK_PERMIT[12] != (BUS_CLOCK_PERMIT[12] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[13] && reg_we && (BUS_CLOCK_PERMIT[13] != (BUS_CLOCK_PERMIT[13] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[14] && reg_we && (BUS_CLOCK_PERMIT[14] != (BUS_CLOCK_PERMIT[14] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[15] && reg_we && (BUS_CLOCK_PERMIT[15] != (BUS_CLOCK_PERMIT[15] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[16] && reg_we && (BUS_CLOCK_PERMIT[16] != (BUS_CLOCK_PERMIT[16] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[17] && reg_we && (BUS_CLOCK_PERMIT[17] != (BUS_CLOCK_PERMIT[17] & reg_be))) wr_err = 1'b1 ;
  end

  assign xbar_slave_node_cfg_xbar_slave_node_cfg_0_we = addr_hit[0] & reg_we & ~wr_err;
  assign xbar_slave_node_cfg_xbar_slave_node_cfg_0_wd = reg_wdata[3:0];

  assign xbar_slave_node_cfg_xbar_slave_node_cfg_1_we = addr_hit[0] & reg_we & ~wr_err;
  assign xbar_slave_node_cfg_xbar_slave_node_cfg_1_wd = reg_wdata[7:4];

  assign xbar_slave_node_cfg_xbar_slave_node_cfg_2_we = addr_hit[0] & reg_we & ~wr_err;
  assign xbar_slave_node_cfg_xbar_slave_node_cfg_2_wd = reg_wdata[11:8];

  assign xbar_slave_node_cfg_xbar_slave_node_cfg_3_we = addr_hit[0] & reg_we & ~wr_err;
  assign xbar_slave_node_cfg_xbar_slave_node_cfg_3_wd = reg_wdata[15:12];

  assign cfg_complex_i_ack_err_we = addr_hit[1] & reg_we & ~wr_err;
  assign cfg_complex_i_ack_err_wd = reg_wdata[7:0];

  assign cfg_complex_i_slice_enable_we = addr_hit[1] & reg_we & ~wr_err;
  assign cfg_complex_i_slice_enable_wd = reg_wdata[15:8];

  assign cfg_complex_i_select_stream_we = addr_hit[1] & reg_we & ~wr_err;
  assign cfg_complex_i_select_stream_wd = reg_wdata[23:16];

  assign cfg_complex_i_fc_enable_we = addr_hit[1] & reg_we & ~wr_err;
  assign cfg_complex_i_fc_enable_wd = reg_wdata[24];

  assign cfg_xbar_barrier_i_we = addr_hit[2] & reg_we & ~wr_err;
  assign cfg_xbar_barrier_i_wd = reg_wdata[31:0];

  assign cfg_xbar_synch_i_we = addr_hit[3] & reg_we & ~wr_err;
  assign cfg_xbar_synch_i_wd = reg_wdata[31:0];

  assign cfg_xbar_stage_0_0_cfg_5_0_we = addr_hit[4] & reg_we & ~wr_err;
  assign cfg_xbar_stage_0_0_cfg_5_0_wd = reg_wdata[6:2];

  assign cfg_xbar_stage_0_0_cfg_4_0_we = addr_hit[4] & reg_we & ~wr_err;
  assign cfg_xbar_stage_0_0_cfg_4_0_wd = reg_wdata[11:7];

  assign cfg_xbar_stage_0_0_cfg_3_0_we = addr_hit[4] & reg_we & ~wr_err;
  assign cfg_xbar_stage_0_0_cfg_3_0_wd = reg_wdata[16:12];

  assign cfg_xbar_stage_0_0_cfg_2_0_we = addr_hit[4] & reg_we & ~wr_err;
  assign cfg_xbar_stage_0_0_cfg_2_0_wd = reg_wdata[21:17];

  assign cfg_xbar_stage_0_0_cfg_1_0_we = addr_hit[4] & reg_we & ~wr_err;
  assign cfg_xbar_stage_0_0_cfg_1_0_wd = reg_wdata[26:22];

  assign cfg_xbar_stage_0_0_cfg_0_0_we = addr_hit[4] & reg_we & ~wr_err;
  assign cfg_xbar_stage_0_0_cfg_0_0_wd = reg_wdata[31:27];

  assign cfg_xbar_stage_0_1_cfg_5_1_we = addr_hit[5] & reg_we & ~wr_err;
  assign cfg_xbar_stage_0_1_cfg_5_1_wd = reg_wdata[6:2];

  assign cfg_xbar_stage_0_1_cfg_4_1_we = addr_hit[5] & reg_we & ~wr_err;
  assign cfg_xbar_stage_0_1_cfg_4_1_wd = reg_wdata[11:7];

  assign cfg_xbar_stage_0_1_cfg_3_1_we = addr_hit[5] & reg_we & ~wr_err;
  assign cfg_xbar_stage_0_1_cfg_3_1_wd = reg_wdata[16:12];

  assign cfg_xbar_stage_0_1_cfg_2_1_we = addr_hit[5] & reg_we & ~wr_err;
  assign cfg_xbar_stage_0_1_cfg_2_1_wd = reg_wdata[21:17];

  assign cfg_xbar_stage_0_1_cfg_1_1_we = addr_hit[5] & reg_we & ~wr_err;
  assign cfg_xbar_stage_0_1_cfg_1_1_wd = reg_wdata[26:22];

  assign cfg_xbar_stage_0_1_cfg_0_1_we = addr_hit[5] & reg_we & ~wr_err;
  assign cfg_xbar_stage_0_1_cfg_0_1_wd = reg_wdata[31:27];

  assign cfg_xbar_stage_0_2_cfg_5_2_we = addr_hit[6] & reg_we & ~wr_err;
  assign cfg_xbar_stage_0_2_cfg_5_2_wd = reg_wdata[6:2];

  assign cfg_xbar_stage_0_2_cfg_4_2_we = addr_hit[6] & reg_we & ~wr_err;
  assign cfg_xbar_stage_0_2_cfg_4_2_wd = reg_wdata[11:7];

  assign cfg_xbar_stage_0_2_cfg_3_2_we = addr_hit[6] & reg_we & ~wr_err;
  assign cfg_xbar_stage_0_2_cfg_3_2_wd = reg_wdata[16:12];

  assign cfg_xbar_stage_0_2_cfg_2_2_we = addr_hit[6] & reg_we & ~wr_err;
  assign cfg_xbar_stage_0_2_cfg_2_2_wd = reg_wdata[21:17];

  assign cfg_xbar_stage_0_2_cfg_1_2_we = addr_hit[6] & reg_we & ~wr_err;
  assign cfg_xbar_stage_0_2_cfg_1_2_wd = reg_wdata[26:22];

  assign cfg_xbar_stage_0_2_cfg_0_2_we = addr_hit[6] & reg_we & ~wr_err;
  assign cfg_xbar_stage_0_2_cfg_0_2_wd = reg_wdata[31:27];

  assign cfg_xbar_stage_0_3_cfg_5_3_we = addr_hit[7] & reg_we & ~wr_err;
  assign cfg_xbar_stage_0_3_cfg_5_3_wd = reg_wdata[6:2];

  assign cfg_xbar_stage_0_3_cfg_4_3_we = addr_hit[7] & reg_we & ~wr_err;
  assign cfg_xbar_stage_0_3_cfg_4_3_wd = reg_wdata[11:7];

  assign cfg_xbar_stage_0_3_cfg_3_3_we = addr_hit[7] & reg_we & ~wr_err;
  assign cfg_xbar_stage_0_3_cfg_3_3_wd = reg_wdata[16:12];

  assign cfg_xbar_stage_0_3_cfg_2_3_we = addr_hit[7] & reg_we & ~wr_err;
  assign cfg_xbar_stage_0_3_cfg_2_3_wd = reg_wdata[21:17];

  assign cfg_xbar_stage_0_3_cfg_1_3_we = addr_hit[7] & reg_we & ~wr_err;
  assign cfg_xbar_stage_0_3_cfg_1_3_wd = reg_wdata[26:22];

  assign cfg_xbar_stage_0_3_cfg_0_3_we = addr_hit[7] & reg_we & ~wr_err;
  assign cfg_xbar_stage_0_3_cfg_0_3_wd = reg_wdata[31:27];

  assign cfg_xbar_stage_0_4_cfg_5_4_we = addr_hit[8] & reg_we & ~wr_err;
  assign cfg_xbar_stage_0_4_cfg_5_4_wd = reg_wdata[6:2];

  assign cfg_xbar_stage_0_4_cfg_4_4_we = addr_hit[8] & reg_we & ~wr_err;
  assign cfg_xbar_stage_0_4_cfg_4_4_wd = reg_wdata[11:7];

  assign cfg_xbar_stage_0_4_cfg_3_4_we = addr_hit[8] & reg_we & ~wr_err;
  assign cfg_xbar_stage_0_4_cfg_3_4_wd = reg_wdata[16:12];

  assign cfg_xbar_stage_0_4_cfg_2_4_we = addr_hit[8] & reg_we & ~wr_err;
  assign cfg_xbar_stage_0_4_cfg_2_4_wd = reg_wdata[21:17];

  assign cfg_xbar_stage_0_4_cfg_1_4_we = addr_hit[8] & reg_we & ~wr_err;
  assign cfg_xbar_stage_0_4_cfg_1_4_wd = reg_wdata[26:22];

  assign cfg_xbar_stage_0_4_cfg_0_4_we = addr_hit[8] & reg_we & ~wr_err;
  assign cfg_xbar_stage_0_4_cfg_0_4_wd = reg_wdata[31:27];

  assign cfg_xbar_stage_0_5_cfg_5_5_we = addr_hit[9] & reg_we & ~wr_err;
  assign cfg_xbar_stage_0_5_cfg_5_5_wd = reg_wdata[6:2];

  assign cfg_xbar_stage_0_5_cfg_4_5_we = addr_hit[9] & reg_we & ~wr_err;
  assign cfg_xbar_stage_0_5_cfg_4_5_wd = reg_wdata[11:7];

  assign cfg_xbar_stage_0_5_cfg_3_5_we = addr_hit[9] & reg_we & ~wr_err;
  assign cfg_xbar_stage_0_5_cfg_3_5_wd = reg_wdata[16:12];

  assign cfg_xbar_stage_0_5_cfg_2_5_we = addr_hit[9] & reg_we & ~wr_err;
  assign cfg_xbar_stage_0_5_cfg_2_5_wd = reg_wdata[21:17];

  assign cfg_xbar_stage_0_5_cfg_1_5_we = addr_hit[9] & reg_we & ~wr_err;
  assign cfg_xbar_stage_0_5_cfg_1_5_wd = reg_wdata[26:22];

  assign cfg_xbar_stage_0_5_cfg_0_5_we = addr_hit[9] & reg_we & ~wr_err;
  assign cfg_xbar_stage_0_5_cfg_0_5_wd = reg_wdata[31:27];

  assign cfg_xbar_stage_0_6_cfg_5_6_we = addr_hit[10] & reg_we & ~wr_err;
  assign cfg_xbar_stage_0_6_cfg_5_6_wd = reg_wdata[6:2];

  assign cfg_xbar_stage_0_6_cfg_4_6_we = addr_hit[10] & reg_we & ~wr_err;
  assign cfg_xbar_stage_0_6_cfg_4_6_wd = reg_wdata[11:7];

  assign cfg_xbar_stage_0_6_cfg_3_6_we = addr_hit[10] & reg_we & ~wr_err;
  assign cfg_xbar_stage_0_6_cfg_3_6_wd = reg_wdata[16:12];

  assign cfg_xbar_stage_0_6_cfg_2_6_we = addr_hit[10] & reg_we & ~wr_err;
  assign cfg_xbar_stage_0_6_cfg_2_6_wd = reg_wdata[21:17];

  assign cfg_xbar_stage_0_6_cfg_1_6_we = addr_hit[10] & reg_we & ~wr_err;
  assign cfg_xbar_stage_0_6_cfg_1_6_wd = reg_wdata[26:22];

  assign cfg_xbar_stage_0_6_cfg_0_6_we = addr_hit[10] & reg_we & ~wr_err;
  assign cfg_xbar_stage_0_6_cfg_0_6_wd = reg_wdata[31:27];

  assign cfg_xbar_stage_0_7_cfg_5_7_we = addr_hit[11] & reg_we & ~wr_err;
  assign cfg_xbar_stage_0_7_cfg_5_7_wd = reg_wdata[6:2];

  assign cfg_xbar_stage_0_7_cfg_4_7_we = addr_hit[11] & reg_we & ~wr_err;
  assign cfg_xbar_stage_0_7_cfg_4_7_wd = reg_wdata[11:7];

  assign cfg_xbar_stage_0_7_cfg_3_7_we = addr_hit[11] & reg_we & ~wr_err;
  assign cfg_xbar_stage_0_7_cfg_3_7_wd = reg_wdata[16:12];

  assign cfg_xbar_stage_0_7_cfg_2_7_we = addr_hit[11] & reg_we & ~wr_err;
  assign cfg_xbar_stage_0_7_cfg_2_7_wd = reg_wdata[21:17];

  assign cfg_xbar_stage_0_7_cfg_1_7_we = addr_hit[11] & reg_we & ~wr_err;
  assign cfg_xbar_stage_0_7_cfg_1_7_wd = reg_wdata[26:22];

  assign cfg_xbar_stage_0_7_cfg_0_7_we = addr_hit[11] & reg_we & ~wr_err;
  assign cfg_xbar_stage_0_7_cfg_0_7_wd = reg_wdata[31:27];

  assign cfg_xbar_stage_1_0_cfg_5_0_we = addr_hit[12] & reg_we & ~wr_err;
  assign cfg_xbar_stage_1_0_cfg_5_0_wd = reg_wdata[6:2];

  assign cfg_xbar_stage_1_0_cfg_4_0_we = addr_hit[12] & reg_we & ~wr_err;
  assign cfg_xbar_stage_1_0_cfg_4_0_wd = reg_wdata[11:7];

  assign cfg_xbar_stage_1_0_cfg_3_0_we = addr_hit[12] & reg_we & ~wr_err;
  assign cfg_xbar_stage_1_0_cfg_3_0_wd = reg_wdata[16:12];

  assign cfg_xbar_stage_1_0_cfg_2_0_we = addr_hit[12] & reg_we & ~wr_err;
  assign cfg_xbar_stage_1_0_cfg_2_0_wd = reg_wdata[21:17];

  assign cfg_xbar_stage_1_0_cfg_1_0_we = addr_hit[12] & reg_we & ~wr_err;
  assign cfg_xbar_stage_1_0_cfg_1_0_wd = reg_wdata[26:22];

  assign cfg_xbar_stage_1_0_cfg_0_0_we = addr_hit[12] & reg_we & ~wr_err;
  assign cfg_xbar_stage_1_0_cfg_0_0_wd = reg_wdata[31:27];

  assign cfg_xbar_stage_1_1_cfg_5_1_we = addr_hit[13] & reg_we & ~wr_err;
  assign cfg_xbar_stage_1_1_cfg_5_1_wd = reg_wdata[6:2];

  assign cfg_xbar_stage_1_1_cfg_4_1_we = addr_hit[13] & reg_we & ~wr_err;
  assign cfg_xbar_stage_1_1_cfg_4_1_wd = reg_wdata[11:7];

  assign cfg_xbar_stage_1_1_cfg_3_1_we = addr_hit[13] & reg_we & ~wr_err;
  assign cfg_xbar_stage_1_1_cfg_3_1_wd = reg_wdata[16:12];

  assign cfg_xbar_stage_1_1_cfg_2_1_we = addr_hit[13] & reg_we & ~wr_err;
  assign cfg_xbar_stage_1_1_cfg_2_1_wd = reg_wdata[21:17];

  assign cfg_xbar_stage_1_1_cfg_1_1_we = addr_hit[13] & reg_we & ~wr_err;
  assign cfg_xbar_stage_1_1_cfg_1_1_wd = reg_wdata[26:22];

  assign cfg_xbar_stage_1_1_cfg_0_1_we = addr_hit[13] & reg_we & ~wr_err;
  assign cfg_xbar_stage_1_1_cfg_0_1_wd = reg_wdata[31:27];

  assign cfg_xbar_stage_1_2_cfg_5_2_we = addr_hit[14] & reg_we & ~wr_err;
  assign cfg_xbar_stage_1_2_cfg_5_2_wd = reg_wdata[6:2];

  assign cfg_xbar_stage_1_2_cfg_4_2_we = addr_hit[14] & reg_we & ~wr_err;
  assign cfg_xbar_stage_1_2_cfg_4_2_wd = reg_wdata[11:7];

  assign cfg_xbar_stage_1_2_cfg_3_2_we = addr_hit[14] & reg_we & ~wr_err;
  assign cfg_xbar_stage_1_2_cfg_3_2_wd = reg_wdata[16:12];

  assign cfg_xbar_stage_1_2_cfg_2_2_we = addr_hit[14] & reg_we & ~wr_err;
  assign cfg_xbar_stage_1_2_cfg_2_2_wd = reg_wdata[21:17];

  assign cfg_xbar_stage_1_2_cfg_1_2_we = addr_hit[14] & reg_we & ~wr_err;
  assign cfg_xbar_stage_1_2_cfg_1_2_wd = reg_wdata[26:22];

  assign cfg_xbar_stage_1_2_cfg_0_2_we = addr_hit[14] & reg_we & ~wr_err;
  assign cfg_xbar_stage_1_2_cfg_0_2_wd = reg_wdata[31:27];

  assign cfg_xbar_stage_1_3_cfg_5_3_we = addr_hit[15] & reg_we & ~wr_err;
  assign cfg_xbar_stage_1_3_cfg_5_3_wd = reg_wdata[6:2];

  assign cfg_xbar_stage_1_3_cfg_4_3_we = addr_hit[15] & reg_we & ~wr_err;
  assign cfg_xbar_stage_1_3_cfg_4_3_wd = reg_wdata[11:7];

  assign cfg_xbar_stage_1_3_cfg_3_3_we = addr_hit[15] & reg_we & ~wr_err;
  assign cfg_xbar_stage_1_3_cfg_3_3_wd = reg_wdata[16:12];

  assign cfg_xbar_stage_1_3_cfg_2_3_we = addr_hit[15] & reg_we & ~wr_err;
  assign cfg_xbar_stage_1_3_cfg_2_3_wd = reg_wdata[21:17];

  assign cfg_xbar_stage_1_3_cfg_1_3_we = addr_hit[15] & reg_we & ~wr_err;
  assign cfg_xbar_stage_1_3_cfg_1_3_wd = reg_wdata[26:22];

  assign cfg_xbar_stage_1_3_cfg_0_3_we = addr_hit[15] & reg_we & ~wr_err;
  assign cfg_xbar_stage_1_3_cfg_0_3_wd = reg_wdata[31:27];

  assign cfg_xbar_stage_1_4_cfg_5_4_we = addr_hit[16] & reg_we & ~wr_err;
  assign cfg_xbar_stage_1_4_cfg_5_4_wd = reg_wdata[6:2];

  assign cfg_xbar_stage_1_4_cfg_4_4_we = addr_hit[16] & reg_we & ~wr_err;
  assign cfg_xbar_stage_1_4_cfg_4_4_wd = reg_wdata[11:7];

  assign cfg_xbar_stage_1_4_cfg_3_4_we = addr_hit[16] & reg_we & ~wr_err;
  assign cfg_xbar_stage_1_4_cfg_3_4_wd = reg_wdata[16:12];

  assign cfg_xbar_stage_1_4_cfg_2_4_we = addr_hit[16] & reg_we & ~wr_err;
  assign cfg_xbar_stage_1_4_cfg_2_4_wd = reg_wdata[21:17];

  assign cfg_xbar_stage_1_4_cfg_1_4_we = addr_hit[16] & reg_we & ~wr_err;
  assign cfg_xbar_stage_1_4_cfg_1_4_wd = reg_wdata[26:22];

  assign cfg_xbar_stage_1_4_cfg_0_4_we = addr_hit[16] & reg_we & ~wr_err;
  assign cfg_xbar_stage_1_4_cfg_0_4_wd = reg_wdata[31:27];

  assign cfg_xbar_stage_1_5_cfg_5_5_we = addr_hit[17] & reg_we & ~wr_err;
  assign cfg_xbar_stage_1_5_cfg_5_5_wd = reg_wdata[6:2];

  assign cfg_xbar_stage_1_5_cfg_4_5_we = addr_hit[17] & reg_we & ~wr_err;
  assign cfg_xbar_stage_1_5_cfg_4_5_wd = reg_wdata[11:7];

  assign cfg_xbar_stage_1_5_cfg_3_5_we = addr_hit[17] & reg_we & ~wr_err;
  assign cfg_xbar_stage_1_5_cfg_3_5_wd = reg_wdata[16:12];

  assign cfg_xbar_stage_1_5_cfg_2_5_we = addr_hit[17] & reg_we & ~wr_err;
  assign cfg_xbar_stage_1_5_cfg_2_5_wd = reg_wdata[21:17];

  assign cfg_xbar_stage_1_5_cfg_1_5_we = addr_hit[17] & reg_we & ~wr_err;
  assign cfg_xbar_stage_1_5_cfg_1_5_wd = reg_wdata[26:22];

  assign cfg_xbar_stage_1_5_cfg_0_5_we = addr_hit[17] & reg_we & ~wr_err;
  assign cfg_xbar_stage_1_5_cfg_0_5_wd = reg_wdata[31:27];

  // Read data return
  always_comb begin
    reg_rdata_next = '0;
    unique case (1'b1)
      addr_hit[0]: begin
        reg_rdata_next[3:0] = xbar_slave_node_cfg_xbar_slave_node_cfg_0_qs;
        reg_rdata_next[7:4] = xbar_slave_node_cfg_xbar_slave_node_cfg_1_qs;
        reg_rdata_next[11:8] = xbar_slave_node_cfg_xbar_slave_node_cfg_2_qs;
        reg_rdata_next[15:12] = xbar_slave_node_cfg_xbar_slave_node_cfg_3_qs;
      end

      addr_hit[1]: begin
        reg_rdata_next[7:0] = cfg_complex_i_ack_err_qs;
        reg_rdata_next[15:8] = cfg_complex_i_slice_enable_qs;
        reg_rdata_next[23:16] = cfg_complex_i_select_stream_qs;
        reg_rdata_next[24] = cfg_complex_i_fc_enable_qs;
      end

      addr_hit[2]: begin
        reg_rdata_next[31:0] = cfg_xbar_barrier_i_qs;
      end

      addr_hit[3]: begin
        reg_rdata_next[31:0] = cfg_xbar_synch_i_qs;
      end

      addr_hit[4]: begin
        reg_rdata_next[6:2] = cfg_xbar_stage_0_0_cfg_5_0_qs;
        reg_rdata_next[11:7] = cfg_xbar_stage_0_0_cfg_4_0_qs;
        reg_rdata_next[16:12] = cfg_xbar_stage_0_0_cfg_3_0_qs;
        reg_rdata_next[21:17] = cfg_xbar_stage_0_0_cfg_2_0_qs;
        reg_rdata_next[26:22] = cfg_xbar_stage_0_0_cfg_1_0_qs;
        reg_rdata_next[31:27] = cfg_xbar_stage_0_0_cfg_0_0_qs;
      end

      addr_hit[5]: begin
        reg_rdata_next[6:2] = cfg_xbar_stage_0_1_cfg_5_1_qs;
        reg_rdata_next[11:7] = cfg_xbar_stage_0_1_cfg_4_1_qs;
        reg_rdata_next[16:12] = cfg_xbar_stage_0_1_cfg_3_1_qs;
        reg_rdata_next[21:17] = cfg_xbar_stage_0_1_cfg_2_1_qs;
        reg_rdata_next[26:22] = cfg_xbar_stage_0_1_cfg_1_1_qs;
        reg_rdata_next[31:27] = cfg_xbar_stage_0_1_cfg_0_1_qs;
      end

      addr_hit[6]: begin
        reg_rdata_next[6:2] = cfg_xbar_stage_0_2_cfg_5_2_qs;
        reg_rdata_next[11:7] = cfg_xbar_stage_0_2_cfg_4_2_qs;
        reg_rdata_next[16:12] = cfg_xbar_stage_0_2_cfg_3_2_qs;
        reg_rdata_next[21:17] = cfg_xbar_stage_0_2_cfg_2_2_qs;
        reg_rdata_next[26:22] = cfg_xbar_stage_0_2_cfg_1_2_qs;
        reg_rdata_next[31:27] = cfg_xbar_stage_0_2_cfg_0_2_qs;
      end

      addr_hit[7]: begin
        reg_rdata_next[6:2] = cfg_xbar_stage_0_3_cfg_5_3_qs;
        reg_rdata_next[11:7] = cfg_xbar_stage_0_3_cfg_4_3_qs;
        reg_rdata_next[16:12] = cfg_xbar_stage_0_3_cfg_3_3_qs;
        reg_rdata_next[21:17] = cfg_xbar_stage_0_3_cfg_2_3_qs;
        reg_rdata_next[26:22] = cfg_xbar_stage_0_3_cfg_1_3_qs;
        reg_rdata_next[31:27] = cfg_xbar_stage_0_3_cfg_0_3_qs;
      end

      addr_hit[8]: begin
        reg_rdata_next[6:2] = cfg_xbar_stage_0_4_cfg_5_4_qs;
        reg_rdata_next[11:7] = cfg_xbar_stage_0_4_cfg_4_4_qs;
        reg_rdata_next[16:12] = cfg_xbar_stage_0_4_cfg_3_4_qs;
        reg_rdata_next[21:17] = cfg_xbar_stage_0_4_cfg_2_4_qs;
        reg_rdata_next[26:22] = cfg_xbar_stage_0_4_cfg_1_4_qs;
        reg_rdata_next[31:27] = cfg_xbar_stage_0_4_cfg_0_4_qs;
      end

      addr_hit[9]: begin
        reg_rdata_next[6:2] = cfg_xbar_stage_0_5_cfg_5_5_qs;
        reg_rdata_next[11:7] = cfg_xbar_stage_0_5_cfg_4_5_qs;
        reg_rdata_next[16:12] = cfg_xbar_stage_0_5_cfg_3_5_qs;
        reg_rdata_next[21:17] = cfg_xbar_stage_0_5_cfg_2_5_qs;
        reg_rdata_next[26:22] = cfg_xbar_stage_0_5_cfg_1_5_qs;
        reg_rdata_next[31:27] = cfg_xbar_stage_0_5_cfg_0_5_qs;
      end

      addr_hit[10]: begin
        reg_rdata_next[6:2] = cfg_xbar_stage_0_6_cfg_5_6_qs;
        reg_rdata_next[11:7] = cfg_xbar_stage_0_6_cfg_4_6_qs;
        reg_rdata_next[16:12] = cfg_xbar_stage_0_6_cfg_3_6_qs;
        reg_rdata_next[21:17] = cfg_xbar_stage_0_6_cfg_2_6_qs;
        reg_rdata_next[26:22] = cfg_xbar_stage_0_6_cfg_1_6_qs;
        reg_rdata_next[31:27] = cfg_xbar_stage_0_6_cfg_0_6_qs;
      end

      addr_hit[11]: begin
        reg_rdata_next[6:2] = cfg_xbar_stage_0_7_cfg_5_7_qs;
        reg_rdata_next[11:7] = cfg_xbar_stage_0_7_cfg_4_7_qs;
        reg_rdata_next[16:12] = cfg_xbar_stage_0_7_cfg_3_7_qs;
        reg_rdata_next[21:17] = cfg_xbar_stage_0_7_cfg_2_7_qs;
        reg_rdata_next[26:22] = cfg_xbar_stage_0_7_cfg_1_7_qs;
        reg_rdata_next[31:27] = cfg_xbar_stage_0_7_cfg_0_7_qs;
      end

      addr_hit[12]: begin
        reg_rdata_next[6:2] = cfg_xbar_stage_1_0_cfg_5_0_qs;
        reg_rdata_next[11:7] = cfg_xbar_stage_1_0_cfg_4_0_qs;
        reg_rdata_next[16:12] = cfg_xbar_stage_1_0_cfg_3_0_qs;
        reg_rdata_next[21:17] = cfg_xbar_stage_1_0_cfg_2_0_qs;
        reg_rdata_next[26:22] = cfg_xbar_stage_1_0_cfg_1_0_qs;
        reg_rdata_next[31:27] = cfg_xbar_stage_1_0_cfg_0_0_qs;
      end

      addr_hit[13]: begin
        reg_rdata_next[6:2] = cfg_xbar_stage_1_1_cfg_5_1_qs;
        reg_rdata_next[11:7] = cfg_xbar_stage_1_1_cfg_4_1_qs;
        reg_rdata_next[16:12] = cfg_xbar_stage_1_1_cfg_3_1_qs;
        reg_rdata_next[21:17] = cfg_xbar_stage_1_1_cfg_2_1_qs;
        reg_rdata_next[26:22] = cfg_xbar_stage_1_1_cfg_1_1_qs;
        reg_rdata_next[31:27] = cfg_xbar_stage_1_1_cfg_0_1_qs;
      end

      addr_hit[14]: begin
        reg_rdata_next[6:2] = cfg_xbar_stage_1_2_cfg_5_2_qs;
        reg_rdata_next[11:7] = cfg_xbar_stage_1_2_cfg_4_2_qs;
        reg_rdata_next[16:12] = cfg_xbar_stage_1_2_cfg_3_2_qs;
        reg_rdata_next[21:17] = cfg_xbar_stage_1_2_cfg_2_2_qs;
        reg_rdata_next[26:22] = cfg_xbar_stage_1_2_cfg_1_2_qs;
        reg_rdata_next[31:27] = cfg_xbar_stage_1_2_cfg_0_2_qs;
      end

      addr_hit[15]: begin
        reg_rdata_next[6:2] = cfg_xbar_stage_1_3_cfg_5_3_qs;
        reg_rdata_next[11:7] = cfg_xbar_stage_1_3_cfg_4_3_qs;
        reg_rdata_next[16:12] = cfg_xbar_stage_1_3_cfg_3_3_qs;
        reg_rdata_next[21:17] = cfg_xbar_stage_1_3_cfg_2_3_qs;
        reg_rdata_next[26:22] = cfg_xbar_stage_1_3_cfg_1_3_qs;
        reg_rdata_next[31:27] = cfg_xbar_stage_1_3_cfg_0_3_qs;
      end

      addr_hit[16]: begin
        reg_rdata_next[6:2] = cfg_xbar_stage_1_4_cfg_5_4_qs;
        reg_rdata_next[11:7] = cfg_xbar_stage_1_4_cfg_4_4_qs;
        reg_rdata_next[16:12] = cfg_xbar_stage_1_4_cfg_3_4_qs;
        reg_rdata_next[21:17] = cfg_xbar_stage_1_4_cfg_2_4_qs;
        reg_rdata_next[26:22] = cfg_xbar_stage_1_4_cfg_1_4_qs;
        reg_rdata_next[31:27] = cfg_xbar_stage_1_4_cfg_0_4_qs;
      end

      addr_hit[17]: begin
        reg_rdata_next[6:2] = cfg_xbar_stage_1_5_cfg_5_5_qs;
        reg_rdata_next[11:7] = cfg_xbar_stage_1_5_cfg_4_5_qs;
        reg_rdata_next[16:12] = cfg_xbar_stage_1_5_cfg_3_5_qs;
        reg_rdata_next[21:17] = cfg_xbar_stage_1_5_cfg_2_5_qs;
        reg_rdata_next[26:22] = cfg_xbar_stage_1_5_cfg_1_5_qs;
        reg_rdata_next[31:27] = cfg_xbar_stage_1_5_cfg_0_5_qs;
      end

      default: begin
        reg_rdata_next = '1;
      end
    endcase
  end

  // Assertions for Register Interface

  `ASSERT(en2addrHit, (reg_we || reg_re) |-> $onehot0(addr_hit))


endmodule
